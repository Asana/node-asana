/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Asana);
  }
}(this, function(expect, Asana) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('StoryResponse', function() {
      beforeEach(function() {
        instance = new Asana.StoryResponse();
      });

      it('should create an instance of StoryResponse', function() {
        // TODO: update the code to test StoryResponse
        expect(instance).to.be.a(Asana.StoryResponse);
      });

      it('should have the property gid (base name: "gid")', function() {
        // TODO: update the code to test the property gid
        expect(instance).to.have.property('gid');
        // expect(instance.gid).to.be(expectedValueLiteral);
      });

      it('should have the property resource_type (base name: "resource_type")', function() {
        // TODO: update the code to test the property resource_type
        expect(instance).to.have.property('resource_type');
        // expect(instance.resource_type).to.be(expectedValueLiteral);
      });

      it('should have the property created_at (base name: "created_at")', function() {
        // TODO: update the code to test the property created_at
        expect(instance).to.have.property('created_at');
        // expect(instance.created_at).to.be(expectedValueLiteral);
      });

      it('should have the property resource_subtype (base name: "resource_subtype")', function() {
        // TODO: update the code to test the property resource_subtype
        expect(instance).to.have.property('resource_subtype');
        // expect(instance.resource_subtype).to.be(expectedValueLiteral);
      });

      it('should have the property text (base name: "text")', function() {
        // TODO: update the code to test the property text
        expect(instance).to.have.property('text');
        // expect(instance.text).to.be(expectedValueLiteral);
      });

      it('should have the property html_text (base name: "html_text")', function() {
        // TODO: update the code to test the property html_text
        expect(instance).to.have.property('html_text');
        // expect(instance.html_text).to.be(expectedValueLiteral);
      });

      it('should have the property is_pinned (base name: "is_pinned")', function() {
        // TODO: update the code to test the property is_pinned
        expect(instance).to.have.property('is_pinned');
        // expect(instance.is_pinned).to.be(expectedValueLiteral);
      });

      it('should have the property sticker_name (base name: "sticker_name")', function() {
        // TODO: update the code to test the property sticker_name
        expect(instance).to.have.property('sticker_name');
        // expect(instance.sticker_name).to.be(expectedValueLiteral);
      });

      it('should have the property created_by (base name: "created_by")', function() {
        // TODO: update the code to test the property created_by
        expect(instance).to.have.property('created_by');
        // expect(instance.created_by).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property is_editable (base name: "is_editable")', function() {
        // TODO: update the code to test the property is_editable
        expect(instance).to.have.property('is_editable');
        // expect(instance.is_editable).to.be(expectedValueLiteral);
      });

      it('should have the property is_edited (base name: "is_edited")', function() {
        // TODO: update the code to test the property is_edited
        expect(instance).to.have.property('is_edited');
        // expect(instance.is_edited).to.be(expectedValueLiteral);
      });

      it('should have the property hearted (base name: "hearted")', function() {
        // TODO: update the code to test the property hearted
        expect(instance).to.have.property('hearted');
        // expect(instance.hearted).to.be(expectedValueLiteral);
      });

      it('should have the property hearts (base name: "hearts")', function() {
        // TODO: update the code to test the property hearts
        expect(instance).to.have.property('hearts');
        // expect(instance.hearts).to.be(expectedValueLiteral);
      });

      it('should have the property num_hearts (base name: "num_hearts")', function() {
        // TODO: update the code to test the property num_hearts
        expect(instance).to.have.property('num_hearts');
        // expect(instance.num_hearts).to.be(expectedValueLiteral);
      });

      it('should have the property liked (base name: "liked")', function() {
        // TODO: update the code to test the property liked
        expect(instance).to.have.property('liked');
        // expect(instance.liked).to.be(expectedValueLiteral);
      });

      it('should have the property likes (base name: "likes")', function() {
        // TODO: update the code to test the property likes
        expect(instance).to.have.property('likes');
        // expect(instance.likes).to.be(expectedValueLiteral);
      });

      it('should have the property num_likes (base name: "num_likes")', function() {
        // TODO: update the code to test the property num_likes
        expect(instance).to.have.property('num_likes');
        // expect(instance.num_likes).to.be(expectedValueLiteral);
      });

      it('should have the property previews (base name: "previews")', function() {
        // TODO: update the code to test the property previews
        expect(instance).to.have.property('previews');
        // expect(instance.previews).to.be(expectedValueLiteral);
      });

      it('should have the property old_name (base name: "old_name")', function() {
        // TODO: update the code to test the property old_name
        expect(instance).to.have.property('old_name');
        // expect(instance.old_name).to.be(expectedValueLiteral);
      });

      it('should have the property new_name (base name: "new_name")', function() {
        // TODO: update the code to test the property new_name
        expect(instance).to.have.property('new_name');
        // expect(instance.new_name).to.be(expectedValueLiteral);
      });

      it('should have the property old_dates (base name: "old_dates")', function() {
        // TODO: update the code to test the property old_dates
        expect(instance).to.have.property('old_dates');
        // expect(instance.old_dates).to.be(expectedValueLiteral);
      });

      it('should have the property new_dates (base name: "new_dates")', function() {
        // TODO: update the code to test the property new_dates
        expect(instance).to.have.property('new_dates');
        // expect(instance.new_dates).to.be(expectedValueLiteral);
      });

      it('should have the property old_resource_subtype (base name: "old_resource_subtype")', function() {
        // TODO: update the code to test the property old_resource_subtype
        expect(instance).to.have.property('old_resource_subtype');
        // expect(instance.old_resource_subtype).to.be(expectedValueLiteral);
      });

      it('should have the property new_resource_subtype (base name: "new_resource_subtype")', function() {
        // TODO: update the code to test the property new_resource_subtype
        expect(instance).to.have.property('new_resource_subtype');
        // expect(instance.new_resource_subtype).to.be(expectedValueLiteral);
      });

      it('should have the property story (base name: "story")', function() {
        // TODO: update the code to test the property story
        expect(instance).to.have.property('story');
        // expect(instance.story).to.be(expectedValueLiteral);
      });

      it('should have the property assignee (base name: "assignee")', function() {
        // TODO: update the code to test the property assignee
        expect(instance).to.have.property('assignee');
        // expect(instance.assignee).to.be(expectedValueLiteral);
      });

      it('should have the property follower (base name: "follower")', function() {
        // TODO: update the code to test the property follower
        expect(instance).to.have.property('follower');
        // expect(instance.follower).to.be(expectedValueLiteral);
      });

      it('should have the property old_section (base name: "old_section")', function() {
        // TODO: update the code to test the property old_section
        expect(instance).to.have.property('old_section');
        // expect(instance.old_section).to.be(expectedValueLiteral);
      });

      it('should have the property new_section (base name: "new_section")', function() {
        // TODO: update the code to test the property new_section
        expect(instance).to.have.property('new_section');
        // expect(instance.new_section).to.be(expectedValueLiteral);
      });

      it('should have the property task (base name: "task")', function() {
        // TODO: update the code to test the property task
        expect(instance).to.have.property('task');
        // expect(instance.task).to.be(expectedValueLiteral);
      });

      it('should have the property project (base name: "project")', function() {
        // TODO: update the code to test the property project
        expect(instance).to.have.property('project');
        // expect(instance.project).to.be(expectedValueLiteral);
      });

      it('should have the property tag (base name: "tag")', function() {
        // TODO: update the code to test the property tag
        expect(instance).to.have.property('tag');
        // expect(instance.tag).to.be(expectedValueLiteral);
      });

      it('should have the property custom_field (base name: "custom_field")', function() {
        // TODO: update the code to test the property custom_field
        expect(instance).to.have.property('custom_field');
        // expect(instance.custom_field).to.be(expectedValueLiteral);
      });

      it('should have the property old_text_value (base name: "old_text_value")', function() {
        // TODO: update the code to test the property old_text_value
        expect(instance).to.have.property('old_text_value');
        // expect(instance.old_text_value).to.be(expectedValueLiteral);
      });

      it('should have the property new_text_value (base name: "new_text_value")', function() {
        // TODO: update the code to test the property new_text_value
        expect(instance).to.have.property('new_text_value');
        // expect(instance.new_text_value).to.be(expectedValueLiteral);
      });

      it('should have the property old_number_value (base name: "old_number_value")', function() {
        // TODO: update the code to test the property old_number_value
        expect(instance).to.have.property('old_number_value');
        // expect(instance.old_number_value).to.be(expectedValueLiteral);
      });

      it('should have the property new_number_value (base name: "new_number_value")', function() {
        // TODO: update the code to test the property new_number_value
        expect(instance).to.have.property('new_number_value');
        // expect(instance.new_number_value).to.be(expectedValueLiteral);
      });

      it('should have the property old_enum_value (base name: "old_enum_value")', function() {
        // TODO: update the code to test the property old_enum_value
        expect(instance).to.have.property('old_enum_value');
        // expect(instance.old_enum_value).to.be(expectedValueLiteral);
      });

      it('should have the property new_enum_value (base name: "new_enum_value")', function() {
        // TODO: update the code to test the property new_enum_value
        expect(instance).to.have.property('new_enum_value');
        // expect(instance.new_enum_value).to.be(expectedValueLiteral);
      });

      it('should have the property old_date_value (base name: "old_date_value")', function() {
        // TODO: update the code to test the property old_date_value
        expect(instance).to.have.property('old_date_value');
        // expect(instance.old_date_value).to.be(expectedValueLiteral);
      });

      it('should have the property new_date_value (base name: "new_date_value")', function() {
        // TODO: update the code to test the property new_date_value
        expect(instance).to.have.property('new_date_value');
        // expect(instance.new_date_value).to.be(expectedValueLiteral);
      });

      it('should have the property old_people_value (base name: "old_people_value")', function() {
        // TODO: update the code to test the property old_people_value
        expect(instance).to.have.property('old_people_value');
        // expect(instance.old_people_value).to.be(expectedValueLiteral);
      });

      it('should have the property new_people_value (base name: "new_people_value")', function() {
        // TODO: update the code to test the property new_people_value
        expect(instance).to.have.property('new_people_value');
        // expect(instance.new_people_value).to.be(expectedValueLiteral);
      });

      it('should have the property old_multi_enum_values (base name: "old_multi_enum_values")', function() {
        // TODO: update the code to test the property old_multi_enum_values
        expect(instance).to.have.property('old_multi_enum_values');
        // expect(instance.old_multi_enum_values).to.be(expectedValueLiteral);
      });

      it('should have the property new_multi_enum_values (base name: "new_multi_enum_values")', function() {
        // TODO: update the code to test the property new_multi_enum_values
        expect(instance).to.have.property('new_multi_enum_values');
        // expect(instance.new_multi_enum_values).to.be(expectedValueLiteral);
      });

      it('should have the property new_approval_status (base name: "new_approval_status")', function() {
        // TODO: update the code to test the property new_approval_status
        expect(instance).to.have.property('new_approval_status');
        // expect(instance.new_approval_status).to.be(expectedValueLiteral);
      });

      it('should have the property old_approval_status (base name: "old_approval_status")', function() {
        // TODO: update the code to test the property old_approval_status
        expect(instance).to.have.property('old_approval_status');
        // expect(instance.old_approval_status).to.be(expectedValueLiteral);
      });

      it('should have the property duplicate_of (base name: "duplicate_of")', function() {
        // TODO: update the code to test the property duplicate_of
        expect(instance).to.have.property('duplicate_of');
        // expect(instance.duplicate_of).to.be(expectedValueLiteral);
      });

      it('should have the property duplicated_from (base name: "duplicated_from")', function() {
        // TODO: update the code to test the property duplicated_from
        expect(instance).to.have.property('duplicated_from');
        // expect(instance.duplicated_from).to.be(expectedValueLiteral);
      });

      it('should have the property dependency (base name: "dependency")', function() {
        // TODO: update the code to test the property dependency
        expect(instance).to.have.property('dependency');
        // expect(instance.dependency).to.be(expectedValueLiteral);
      });

      it('should have the property source (base name: "source")', function() {
        // TODO: update the code to test the property source
        expect(instance).to.have.property('source');
        // expect(instance.source).to.be(expectedValueLiteral);
      });

      it('should have the property target (base name: "target")', function() {
        // TODO: update the code to test the property target
        expect(instance).to.have.property('target');
        // expect(instance.target).to.be(expectedValueLiteral);
      });

    });
  });

}));
