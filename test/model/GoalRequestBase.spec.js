/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Asana);
  }
}(this, function(expect, Asana) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GoalRequestBase', function() {
      beforeEach(function() {
        instance = new Asana.GoalRequestBase();
      });

      it('should create an instance of GoalRequestBase', function() {
        // TODO: update the code to test GoalRequestBase
        expect(instance).to.be.a(Asana.GoalRequestBase);
      });

      it('should have the property gid (base name: "gid")', function() {
        // TODO: update the code to test the property gid
        expect(instance).to.have.property('gid');
        // expect(instance.gid).to.be(expectedValueLiteral);
      });

      it('should have the property resource_type (base name: "resource_type")', function() {
        // TODO: update the code to test the property resource_type
        expect(instance).to.have.property('resource_type');
        // expect(instance.resource_type).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property html_notes (base name: "html_notes")', function() {
        // TODO: update the code to test the property html_notes
        expect(instance).to.have.property('html_notes');
        // expect(instance.html_notes).to.be(expectedValueLiteral);
      });

      it('should have the property notes (base name: "notes")', function() {
        // TODO: update the code to test the property notes
        expect(instance).to.have.property('notes');
        // expect(instance.notes).to.be(expectedValueLiteral);
      });

      it('should have the property due_on (base name: "due_on")', function() {
        // TODO: update the code to test the property due_on
        expect(instance).to.have.property('due_on');
        // expect(instance.due_on).to.be(expectedValueLiteral);
      });

      it('should have the property start_on (base name: "start_on")', function() {
        // TODO: update the code to test the property start_on
        expect(instance).to.have.property('start_on');
        // expect(instance.start_on).to.be(expectedValueLiteral);
      });

      it('should have the property is_workspace_level (base name: "is_workspace_level")', function() {
        // TODO: update the code to test the property is_workspace_level
        expect(instance).to.have.property('is_workspace_level');
        // expect(instance.is_workspace_level).to.be(expectedValueLiteral);
      });

      it('should have the property liked (base name: "liked")', function() {
        // TODO: update the code to test the property liked
        expect(instance).to.have.property('liked');
        // expect(instance.liked).to.be(expectedValueLiteral);
      });

      it('should have the property team (base name: "team")', function() {
        // TODO: update the code to test the property team
        expect(instance).to.have.property('team');
        // expect(instance.team).to.be(expectedValueLiteral);
      });

      it('should have the property workspace (base name: "workspace")', function() {
        // TODO: update the code to test the property workspace
        expect(instance).to.have.property('workspace');
        // expect(instance.workspace).to.be(expectedValueLiteral);
      });

      it('should have the property time_period (base name: "time_period")', function() {
        // TODO: update the code to test the property time_period
        expect(instance).to.have.property('time_period');
        // expect(instance.time_period).to.be(expectedValueLiteral);
      });

      it('should have the property owner (base name: "owner")', function() {
        // TODO: update the code to test the property owner
        expect(instance).to.have.property('owner');
        // expect(instance.owner).to.be(expectedValueLiteral);
      });

    });
  });

}));
