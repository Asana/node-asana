/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Asana);
  }
}(this, function(expect, Asana) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('StoryResponsePreviews', function() {
      beforeEach(function() {
        instance = new Asana.StoryResponsePreviews();
      });

      it('should create an instance of StoryResponsePreviews', function() {
        // TODO: update the code to test StoryResponsePreviews
        expect(instance).to.be.a(Asana.StoryResponsePreviews);
      });

      it('should have the property fallback (base name: "fallback")', function() {
        // TODO: update the code to test the property fallback
        expect(instance).to.have.property('fallback');
        // expect(instance.fallback).to.be(expectedValueLiteral);
      });

      it('should have the property footer (base name: "footer")', function() {
        // TODO: update the code to test the property footer
        expect(instance).to.have.property('footer');
        // expect(instance.footer).to.be(expectedValueLiteral);
      });

      it('should have the property header (base name: "header")', function() {
        // TODO: update the code to test the property header
        expect(instance).to.have.property('header');
        // expect(instance.header).to.be(expectedValueLiteral);
      });

      it('should have the property header_link (base name: "header_link")', function() {
        // TODO: update the code to test the property header_link
        expect(instance).to.have.property('header_link');
        // expect(instance.header_link).to.be(expectedValueLiteral);
      });

      it('should have the property html_text (base name: "html_text")', function() {
        // TODO: update the code to test the property html_text
        expect(instance).to.have.property('html_text');
        // expect(instance.html_text).to.be(expectedValueLiteral);
      });

      it('should have the property text (base name: "text")', function() {
        // TODO: update the code to test the property text
        expect(instance).to.have.property('text');
        // expect(instance.text).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property title_link (base name: "title_link")', function() {
        // TODO: update the code to test the property title_link
        expect(instance).to.have.property('title_link');
        // expect(instance.title_link).to.be(expectedValueLiteral);
      });

    });
  });

}));
