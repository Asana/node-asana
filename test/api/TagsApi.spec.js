/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Asana);
  }
}(this, function(expect, Asana) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Asana.TagsApi();
  });

  describe('(package)', function() {
    describe('TagsApi', function() {
      describe('createTag', function() {
        it('should call createTag successfully', function(done) {
          // TODO: uncomment, update parameter values for createTag call and complete the assertions
          /*
          var opts = {};

          instance.createTag(body, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.TagResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createTagForWorkspace', function() {
        it('should call createTagForWorkspace successfully', function(done) {
          // TODO: uncomment, update parameter values for createTagForWorkspace call and complete the assertions
          /*
          var opts = {};

          instance.createTagForWorkspace(body, workspace_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.TagResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteTag', function() {
        it('should call deleteTag successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteTag call and complete the assertions
          /*

          instance.deleteTag(tag_gid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.EmptyResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTag', function() {
        it('should call getTag successfully', function(done) {
          // TODO: uncomment, update parameter values for getTag call and complete the assertions
          /*
          var opts = {};

          instance.getTag(tag_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.TagResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTags', function() {
        it('should call getTags successfully', function(done) {
          // TODO: uncomment, update parameter values for getTags call and complete the assertions
          /*
          var opts = {};

          instance.getTags(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.TagResponseArray);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTagsForTask', function() {
        it('should call getTagsForTask successfully', function(done) {
          // TODO: uncomment, update parameter values for getTagsForTask call and complete the assertions
          /*
          var opts = {};

          instance.getTagsForTask(task_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.TagResponseArray);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTagsForWorkspace', function() {
        it('should call getTagsForWorkspace successfully', function(done) {
          // TODO: uncomment, update parameter values for getTagsForWorkspace call and complete the assertions
          /*
          var opts = {};

          instance.getTagsForWorkspace(workspace_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.TagResponseArray);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateTag', function() {
        it('should call updateTag successfully', function(done) {
          // TODO: uncomment, update parameter values for updateTag call and complete the assertions
          /*
          var opts = {};

          instance.updateTag(tag_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.TagResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
