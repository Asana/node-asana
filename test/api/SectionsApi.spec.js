/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Asana);
  }
}(this, function(expect, Asana) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Asana.SectionsApi();
  });

  describe('(package)', function() {
    describe('SectionsApi', function() {
      describe('addTaskForSection', function() {
        it('should call addTaskForSection successfully', function(done) {
          // TODO: uncomment, update parameter values for addTaskForSection call and complete the assertions
          /*
          var opts = {};

          instance.addTaskForSection(section_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.EmptyResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createSectionForProject', function() {
        it('should call createSectionForProject successfully', function(done) {
          // TODO: uncomment, update parameter values for createSectionForProject call and complete the assertions
          /*
          var opts = {};

          instance.createSectionForProject(project_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.SectionResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteSection', function() {
        it('should call deleteSection successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteSection call and complete the assertions
          /*

          instance.deleteSection(section_gid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.EmptyResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSection', function() {
        it('should call getSection successfully', function(done) {
          // TODO: uncomment, update parameter values for getSection call and complete the assertions
          /*
          var opts = {};

          instance.getSection(section_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.SectionResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSectionsForProject', function() {
        it('should call getSectionsForProject successfully', function(done) {
          // TODO: uncomment, update parameter values for getSectionsForProject call and complete the assertions
          /*
          var opts = {};

          instance.getSectionsForProject(project_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.SectionResponseArray);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('insertSectionForProject', function() {
        it('should call insertSectionForProject successfully', function(done) {
          // TODO: uncomment, update parameter values for insertSectionForProject call and complete the assertions
          /*
          var opts = {};

          instance.insertSectionForProject(project_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.EmptyResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateSection', function() {
        it('should call updateSection successfully', function(done) {
          // TODO: uncomment, update parameter values for updateSection call and complete the assertions
          /*
          var opts = {};

          instance.updateSection(section_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.SectionResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
