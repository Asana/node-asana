/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Asana);
  }
}(this, function(expect, Asana) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Asana.ProjectsApi();
  });

  describe('(package)', function() {
    describe('ProjectsApi', function() {
      describe('addCustomFieldSettingForProject', function() {
        it('should call addCustomFieldSettingForProject successfully', function(done) {
          // TODO: uncomment, update parameter values for addCustomFieldSettingForProject call and complete the assertions
          /*

          instance.addCustomFieldSettingForProject(body, project_gid).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Asana.CustomFieldSettingResponseData);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('addFollowersForProject', function() {
        it('should call addFollowersForProject successfully', function(done) {
          // TODO: uncomment, update parameter values for addFollowersForProject call and complete the assertions
          /*
          var opts = {};

          instance.addFollowersForProject(body, project_gid, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Asana.ProjectResponseData);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('addMembersForProject', function() {
        it('should call addMembersForProject successfully', function(done) {
          // TODO: uncomment, update parameter values for addMembersForProject call and complete the assertions
          /*
          var opts = {};

          instance.addMembersForProject(body, project_gid, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Asana.ProjectResponseData);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createProject', function() {
        it('should call createProject successfully', function(done) {
          // TODO: uncomment, update parameter values for createProject call and complete the assertions
          /*
          var opts = {};

          instance.createProject(body, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Asana.ProjectResponseData);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createProjectForTeam', function() {
        it('should call createProjectForTeam successfully', function(done) {
          // TODO: uncomment, update parameter values for createProjectForTeam call and complete the assertions
          /*
          var opts = {};

          instance.createProjectForTeam(body, team_gid, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Asana.ProjectResponseData);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createProjectForWorkspace', function() {
        it('should call createProjectForWorkspace successfully', function(done) {
          // TODO: uncomment, update parameter values for createProjectForWorkspace call and complete the assertions
          /*
          var opts = {};

          instance.createProjectForWorkspace(body, workspace_gid, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Asana.ProjectResponseData);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteProject', function() {
        it('should call deleteProject successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteProject call and complete the assertions
          /*

          instance.deleteProject(project_gid).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Asana.EmptyResponseData);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('duplicateProject', function() {
        it('should call duplicateProject successfully', function(done) {
          // TODO: uncomment, update parameter values for duplicateProject call and complete the assertions
          /*
          var opts = {};

          instance.duplicateProject(project_gid, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Asana.JobResponseData);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProject', function() {
        it('should call getProject successfully', function(done) {
          // TODO: uncomment, update parameter values for getProject call and complete the assertions
          /*
          var opts = {};

          instance.getProject(project_gid, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Asana.ProjectResponseData);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProjects', function() {
        it('should call getProjects successfully', function(done) {
          // TODO: uncomment, update parameter values for getProjects call and complete the assertions
          /*
          var opts = {};

          instance.getProjects(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Asana.ProjectResponseArray);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProjectsForTask', function() {
        it('should call getProjectsForTask successfully', function(done) {
          // TODO: uncomment, update parameter values for getProjectsForTask call and complete the assertions
          /*
          var opts = {};

          instance.getProjectsForTask(task_gid, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Asana.ProjectResponseArray);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProjectsForTeam', function() {
        it('should call getProjectsForTeam successfully', function(done) {
          // TODO: uncomment, update parameter values for getProjectsForTeam call and complete the assertions
          /*
          var opts = {};

          instance.getProjectsForTeam(team_gid, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Asana.ProjectResponseArray);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProjectsForWorkspace', function() {
        it('should call getProjectsForWorkspace successfully', function(done) {
          // TODO: uncomment, update parameter values for getProjectsForWorkspace call and complete the assertions
          /*
          var opts = {};

          instance.getProjectsForWorkspace(workspace_gid, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Asana.ProjectResponseArray);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTaskCountsForProject', function() {
        it('should call getTaskCountsForProject successfully', function(done) {
          // TODO: uncomment, update parameter values for getTaskCountsForProject call and complete the assertions
          /*
          var opts = {};

          instance.getTaskCountsForProject(project_gid, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Asana.TaskCountResponseData);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectSaveAsTemplate', function() {
        it('should call projectSaveAsTemplate successfully', function(done) {
          // TODO: uncomment, update parameter values for projectSaveAsTemplate call and complete the assertions
          /*
          var opts = {};

          instance.projectSaveAsTemplate(body, project_gid, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Asana.JobResponseData);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeCustomFieldSettingForProject', function() {
        it('should call removeCustomFieldSettingForProject successfully', function(done) {
          // TODO: uncomment, update parameter values for removeCustomFieldSettingForProject call and complete the assertions
          /*

          instance.removeCustomFieldSettingForProject(body, project_gid).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Asana.EmptyResponseData);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeFollowersForProject', function() {
        it('should call removeFollowersForProject successfully', function(done) {
          // TODO: uncomment, update parameter values for removeFollowersForProject call and complete the assertions
          /*
          var opts = {};

          instance.removeFollowersForProject(body, project_gid, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Asana.ProjectResponseData);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeMembersForProject', function() {
        it('should call removeMembersForProject successfully', function(done) {
          // TODO: uncomment, update parameter values for removeMembersForProject call and complete the assertions
          /*
          var opts = {};

          instance.removeMembersForProject(body, project_gid, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Asana.ProjectResponseData);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateProject', function() {
        it('should call updateProject successfully', function(done) {
          // TODO: uncomment, update parameter values for updateProject call and complete the assertions
          /*
          var opts = {};

          instance.updateProject(body, project_gid, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Asana.ProjectResponseData);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
