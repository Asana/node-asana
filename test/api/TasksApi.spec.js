/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Asana);
  }
}(this, function(expect, Asana) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Asana.TasksApi();
  });

  describe('(package)', function() {
    describe('TasksApi', function() {
      describe('addDependenciesForTask', function() {
        it('should call addDependenciesForTask successfully', function(done) {
          // TODO: uncomment, update parameter values for addDependenciesForTask call and complete the assertions
          /*

          instance.addDependenciesForTask(body, task_gid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.EmptyResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('addDependentsForTask', function() {
        it('should call addDependentsForTask successfully', function(done) {
          // TODO: uncomment, update parameter values for addDependentsForTask call and complete the assertions
          /*

          instance.addDependentsForTask(body, task_gid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.EmptyResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('addFollowersForTask', function() {
        it('should call addFollowersForTask successfully', function(done) {
          // TODO: uncomment, update parameter values for addFollowersForTask call and complete the assertions
          /*
          var opts = {};

          instance.addFollowersForTask(body, task_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.TaskResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('addProjectForTask', function() {
        it('should call addProjectForTask successfully', function(done) {
          // TODO: uncomment, update parameter values for addProjectForTask call and complete the assertions
          /*

          instance.addProjectForTask(body, task_gid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.EmptyResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('addTagForTask', function() {
        it('should call addTagForTask successfully', function(done) {
          // TODO: uncomment, update parameter values for addTagForTask call and complete the assertions
          /*

          instance.addTagForTask(body, task_gid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.EmptyResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createSubtaskForTask', function() {
        it('should call createSubtaskForTask successfully', function(done) {
          // TODO: uncomment, update parameter values for createSubtaskForTask call and complete the assertions
          /*
          var opts = {};

          instance.createSubtaskForTask(body, task_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.TaskResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createTask', function() {
        it('should call createTask successfully', function(done) {
          // TODO: uncomment, update parameter values for createTask call and complete the assertions
          /*
          var opts = {};

          instance.createTask(body, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.TaskResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteTask', function() {
        it('should call deleteTask successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteTask call and complete the assertions
          /*

          instance.deleteTask(task_gid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.EmptyResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('duplicateTask', function() {
        it('should call duplicateTask successfully', function(done) {
          // TODO: uncomment, update parameter values for duplicateTask call and complete the assertions
          /*
          var opts = {};

          instance.duplicateTask(body, task_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.JobResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDependenciesForTask', function() {
        it('should call getDependenciesForTask successfully', function(done) {
          // TODO: uncomment, update parameter values for getDependenciesForTask call and complete the assertions
          /*
          var opts = {};

          instance.getDependenciesForTask(task_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.TaskResponseArray);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDependentsForTask', function() {
        it('should call getDependentsForTask successfully', function(done) {
          // TODO: uncomment, update parameter values for getDependentsForTask call and complete the assertions
          /*
          var opts = {};

          instance.getDependentsForTask(task_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.TaskResponseArray);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSubtasksForTask', function() {
        it('should call getSubtasksForTask successfully', function(done) {
          // TODO: uncomment, update parameter values for getSubtasksForTask call and complete the assertions
          /*
          var opts = {};

          instance.getSubtasksForTask(task_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.TaskResponseArray);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTask', function() {
        it('should call getTask successfully', function(done) {
          // TODO: uncomment, update parameter values for getTask call and complete the assertions
          /*
          var opts = {};

          instance.getTask(task_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.TaskResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTasks', function() {
        it('should call getTasks successfully', function(done) {
          // TODO: uncomment, update parameter values for getTasks call and complete the assertions
          /*
          var opts = {};

          instance.getTasks(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.TaskResponseArray);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTasksForProject', function() {
        it('should call getTasksForProject successfully', function(done) {
          // TODO: uncomment, update parameter values for getTasksForProject call and complete the assertions
          /*
          var opts = {};

          instance.getTasksForProject(project_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.TaskResponseArray);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTasksForSection', function() {
        it('should call getTasksForSection successfully', function(done) {
          // TODO: uncomment, update parameter values for getTasksForSection call and complete the assertions
          /*
          var opts = {};

          instance.getTasksForSection(section_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.TaskResponseArray);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTasksForTag', function() {
        it('should call getTasksForTag successfully', function(done) {
          // TODO: uncomment, update parameter values for getTasksForTag call and complete the assertions
          /*
          var opts = {};

          instance.getTasksForTag(tag_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.TaskResponseArray);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTasksForUserTaskList', function() {
        it('should call getTasksForUserTaskList successfully', function(done) {
          // TODO: uncomment, update parameter values for getTasksForUserTaskList call and complete the assertions
          /*
          var opts = {};

          instance.getTasksForUserTaskList(user_task_list_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.TaskResponseArray);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeDependenciesForTask', function() {
        it('should call removeDependenciesForTask successfully', function(done) {
          // TODO: uncomment, update parameter values for removeDependenciesForTask call and complete the assertions
          /*

          instance.removeDependenciesForTask(body, task_gid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.EmptyResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeDependentsForTask', function() {
        it('should call removeDependentsForTask successfully', function(done) {
          // TODO: uncomment, update parameter values for removeDependentsForTask call and complete the assertions
          /*

          instance.removeDependentsForTask(body, task_gid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.EmptyResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeFollowerForTask', function() {
        it('should call removeFollowerForTask successfully', function(done) {
          // TODO: uncomment, update parameter values for removeFollowerForTask call and complete the assertions
          /*
          var opts = {};

          instance.removeFollowerForTask(body, task_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.TaskResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeProjectForTask', function() {
        it('should call removeProjectForTask successfully', function(done) {
          // TODO: uncomment, update parameter values for removeProjectForTask call and complete the assertions
          /*

          instance.removeProjectForTask(body, task_gid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.EmptyResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeTagForTask', function() {
        it('should call removeTagForTask successfully', function(done) {
          // TODO: uncomment, update parameter values for removeTagForTask call and complete the assertions
          /*

          instance.removeTagForTask(body, task_gid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.EmptyResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('searchTasksForWorkspace', function() {
        it('should call searchTasksForWorkspace successfully', function(done) {
          // TODO: uncomment, update parameter values for searchTasksForWorkspace call and complete the assertions
          /*
          var opts = {};

          instance.searchTasksForWorkspace(workspace_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.TaskResponseArray);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setParentForTask', function() {
        it('should call setParentForTask successfully', function(done) {
          // TODO: uncomment, update parameter values for setParentForTask call and complete the assertions
          /*
          var opts = {};

          instance.setParentForTask(body, task_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.TaskResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateTask', function() {
        it('should call updateTask successfully', function(done) {
          // TODO: uncomment, update parameter values for updateTask call and complete the assertions
          /*
          var opts = {};

          instance.updateTask(body, task_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.TaskResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
