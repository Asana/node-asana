/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Asana);
  }
}(this, function(expect, Asana) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Asana.PortfoliosApi();
  });

  describe('(package)', function() {
    describe('PortfoliosApi', function() {
      describe('addCustomFieldSettingForPortfolio', function() {
        it('should call addCustomFieldSettingForPortfolio successfully', function(done) {
          // TODO: uncomment, update parameter values for addCustomFieldSettingForPortfolio call and complete the assertions
          /*

          instance.addCustomFieldSettingForPortfolio(body, portfolio_gid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.CustomFieldSettingResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('addItemForPortfolio', function() {
        it('should call addItemForPortfolio successfully', function(done) {
          // TODO: uncomment, update parameter values for addItemForPortfolio call and complete the assertions
          /*

          instance.addItemForPortfolio(body, portfolio_gid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.EmptyResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('addMembersForPortfolio', function() {
        it('should call addMembersForPortfolio successfully', function(done) {
          // TODO: uncomment, update parameter values for addMembersForPortfolio call and complete the assertions
          /*
          var opts = {};

          instance.addMembersForPortfolio(body, portfolio_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.PortfolioResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createPortfolio', function() {
        it('should call createPortfolio successfully', function(done) {
          // TODO: uncomment, update parameter values for createPortfolio call and complete the assertions
          /*
          var opts = {};

          instance.createPortfolio(body, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.PortfolioResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletePortfolio', function() {
        it('should call deletePortfolio successfully', function(done) {
          // TODO: uncomment, update parameter values for deletePortfolio call and complete the assertions
          /*

          instance.deletePortfolio(portfolio_gid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.EmptyResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getItemsForPortfolio', function() {
        it('should call getItemsForPortfolio successfully', function(done) {
          // TODO: uncomment, update parameter values for getItemsForPortfolio call and complete the assertions
          /*
          var opts = {};

          instance.getItemsForPortfolio(portfolio_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.ProjectResponseArray);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPortfolio', function() {
        it('should call getPortfolio successfully', function(done) {
          // TODO: uncomment, update parameter values for getPortfolio call and complete the assertions
          /*
          var opts = {};

          instance.getPortfolio(portfolio_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.PortfolioResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPortfolios', function() {
        it('should call getPortfolios successfully', function(done) {
          // TODO: uncomment, update parameter values for getPortfolios call and complete the assertions
          /*
          var opts = {};

          instance.getPortfolios(workspace, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.PortfolioResponseArray);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeCustomFieldSettingForPortfolio', function() {
        it('should call removeCustomFieldSettingForPortfolio successfully', function(done) {
          // TODO: uncomment, update parameter values for removeCustomFieldSettingForPortfolio call and complete the assertions
          /*

          instance.removeCustomFieldSettingForPortfolio(body, portfolio_gid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.EmptyResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeItemForPortfolio', function() {
        it('should call removeItemForPortfolio successfully', function(done) {
          // TODO: uncomment, update parameter values for removeItemForPortfolio call and complete the assertions
          /*

          instance.removeItemForPortfolio(body, portfolio_gid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.EmptyResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeMembersForPortfolio', function() {
        it('should call removeMembersForPortfolio successfully', function(done) {
          // TODO: uncomment, update parameter values for removeMembersForPortfolio call and complete the assertions
          /*
          var opts = {};

          instance.removeMembersForPortfolio(body, portfolio_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.PortfolioResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatePortfolio', function() {
        it('should call updatePortfolio successfully', function(done) {
          // TODO: uncomment, update parameter values for updatePortfolio call and complete the assertions
          /*
          var opts = {};

          instance.updatePortfolio(body, portfolio_gid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Asana.PortfolioResponseData);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
