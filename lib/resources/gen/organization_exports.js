/**
 * This file is auto-generated by the `asana-api-meta` NodeJS package.
 * We try to keep the generated code pretty clean but there will be lint
 * errors that are just not worth fixing (like unused requires).
 * TODO: maybe we can just disable those specifically and keep this code
 * pretty lint-free too!
 */
/* jshint ignore:start */
var Resource = require('../resource');
var util = require('util');
var _ = require('lodash');

/**
 * An _organization_export_ object represents a request to export the complete data of an Organization
 * in JSON format.
 * 
 * To export an Organization using this API:
 * 
 * * Create an `organization_export` [request](#create) and store the id that is returned.\
 * * Request the `organization_export` every few minutes, until the `state` field contains 'finished'.\
 * * Download the file located at the URL in the `download_url` field.
 * 
 * Exports can take a long time, from several minutes to a few hours for large Organizations.
 * 
 * **Note:** These endpoints are only available to [Service Accounts](/guide/help/premium/service-accounts)
 * of an [Enterprise](/enterprise) Organization.
 * @class
 * @param {Dispatcher} dispatcher The API dispatcher
 */
function OrganizationExports(dispatcher) {
  Resource.call(this, dispatcher);
}
util.inherits(OrganizationExports, Resource);


/**
 * Returns details of a previously-requested Organization export.
   * @param {String} organization_export Globally unique identifier for the Organization export.
   * @param {Object} [params] Parameters for the request
   * @param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
   * @return {Promise} The requested resource
 */
OrganizationExports.prototype.findById = function(
    organizationExport,
    params,
    dispatchOptions
) {
  var path = util.format('/organization_exports/%s', organizationExport);
  
  return this.dispatchGet(path, params, dispatchOptions);
};

/**
 * This method creates a request to export an Organization. Asana will complete the export at some
 * point after you create the request.
   * @param {Object} data Data for the request
   * @param {String} data.organization Globally unique identifier for the workspace or organization.
   * @param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
   * @return {Promise} The response from the API
 */
OrganizationExports.prototype.create = function(
    data,
    dispatchOptions
) {
  var path = util.format('/organization_exports');
  
  return this.dispatchPost(path, data, dispatchOptions);
};


module.exports = OrganizationExports;
/* jshint ignore:end */