/**
 * This file is auto-generated by our openapi spec.
 * We try to keep the generated code pretty clean but there will be lint
 * errors that are just not worth fixing (like unused requires).
 * TODO: maybe we can just disable those specifically and keep this code
 * pretty lint-free too!
 */
/* jshint ignore:start */
var Resource = require('../resource');
var util = require('util');
var _ = require('lodash');

function Tasks(dispatcher) {
    Resource.call(this, dispatcher);
}
util.inherits(Tasks, Resource);


/**
 * Set dependencies for a task
 * @param {String} taskGid: (required) The task to operate on.
 * @param {Object} data: Data for the request
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
Tasks.prototype.addDependenciesForTask = function(
    taskGid,
    data,
    dispatchOptions
) {
    var path = "/tasks/{task_gid}/addDependencies".replace("{task_gid}", taskGid);

    return this.dispatchPost(path, data, dispatchOptions)
};


/**
 * Set dependents for a task
 * @param {String} taskGid: (required) The task to operate on.
 * @param {Object} data: Data for the request
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
Tasks.prototype.addDependentsForTask = function(
    taskGid,
    data,
    dispatchOptions
) {
    var path = "/tasks/{task_gid}/addDependents".replace("{task_gid}", taskGid);

    return this.dispatchPost(path, data, dispatchOptions)
};


/**
 * Add followers to a task
 * @param {String} taskGid: (required) The task to operate on.
 * @param {Object} data: Data for the request
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
Tasks.prototype.addFollowersForTask = function(
    taskGid,
    data,
    dispatchOptions
) {
    var path = "/tasks/{task_gid}/addFollowers".replace("{task_gid}", taskGid);

    return this.dispatchPost(path, data, dispatchOptions)
};


/**
 * Add a project to a task
 * @param {String} taskGid: (required) The task to operate on.
 * @param {Object} data: Data for the request
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
Tasks.prototype.addProjectForTask = function(
    taskGid,
    data,
    dispatchOptions
) {
    var path = "/tasks/{task_gid}/addProject".replace("{task_gid}", taskGid);

    return this.dispatchPost(path, data, dispatchOptions)
};


/**
 * Add a tag to a task
 * @param {String} taskGid: (required) The task to operate on.
 * @param {Object} data: Data for the request
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
Tasks.prototype.addTagForTask = function(
    taskGid,
    data,
    dispatchOptions
) {
    var path = "/tasks/{task_gid}/addTag".replace("{task_gid}", taskGid);

    return this.dispatchPost(path, data, dispatchOptions)
};


/**
 * Create a subtask
 * @param {String} taskGid: (required) The task to operate on.
 * @param {Object} data: Data for the request
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
Tasks.prototype.createSubtaskForTask = function(
    taskGid,
    data,
    dispatchOptions
) {
    var path = "/tasks/{task_gid}/subtasks".replace("{task_gid}", taskGid);

    return this.dispatchPost(path, data, dispatchOptions)
};


/**
 * Create a task
 * @param {Object} data: Data for the request
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
Tasks.prototype.createTask = function(
    data,
    dispatchOptions
) {
    var path = "/tasks";

    return this.dispatchPost(path, data, dispatchOptions)
};


/**
 * Delete a task
 * @param {String} taskGid: (required) The task to operate on.
 * @param {Object} data: Data for the request
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
Tasks.prototype.deleteTask = function(
    taskGid,
    data,
    dispatchOptions
) {
    var path = "/tasks/{task_gid}".replace("{task_gid}", taskGid);

    return this.dispatchDelete(path, data, dispatchOptions)
};


/**
 * Duplicate a task
 * @param {String} taskGid: (required) The task to operate on.
 * @param {Object} data: Data for the request
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
Tasks.prototype.duplicateTask = function(
    taskGid,
    data,
    dispatchOptions
) {
    var path = "/tasks/{task_gid}/duplicate".replace("{task_gid}", taskGid);

    return this.dispatchPost(path, data, dispatchOptions)
};


/**
 * Get dependencies from a task
 * @param {String} taskGid: (required) The task to operate on.
 * @param {Object} params: Parameters for the request
     - offset {String}:  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     - limit {Number}:  Results per page. The number of objects to return per page. The value must be between 1 and 100.
     - optFields {[String]}:  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     - optPretty {Boolean}:  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
Tasks.prototype.getDependenciesForTask = function(
    taskGid,
    params,
    dispatchOptions
) {
    var path = "/tasks/{task_gid}/dependencies".replace("{task_gid}", taskGid);

    return this.dispatchGetCollection(path, params, dispatchOptions)
};


/**
 * Get dependents from a task
 * @param {String} taskGid: (required) The task to operate on.
 * @param {Object} params: Parameters for the request
     - offset {String}:  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     - limit {Number}:  Results per page. The number of objects to return per page. The value must be between 1 and 100.
     - optFields {[String]}:  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     - optPretty {Boolean}:  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
Tasks.prototype.getDependentsForTask = function(
    taskGid,
    params,
    dispatchOptions
) {
    var path = "/tasks/{task_gid}/dependents".replace("{task_gid}", taskGid);

    return this.dispatchGetCollection(path, params, dispatchOptions)
};


/**
 * Get subtasks from a task
 * @param {String} taskGid: (required) The task to operate on.
 * @param {Object} params: Parameters for the request
     - offset {String}:  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     - limit {Number}:  Results per page. The number of objects to return per page. The value must be between 1 and 100.
     - optFields {[String]}:  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     - optPretty {Boolean}:  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
Tasks.prototype.getSubtasksForTask = function(
    taskGid,
    params,
    dispatchOptions
) {
    var path = "/tasks/{task_gid}/subtasks".replace("{task_gid}", taskGid);

    return this.dispatchGetCollection(path, params, dispatchOptions)
};


/**
 * Get a task
 * @param {String} taskGid: (required) The task to operate on.
 * @param {Object} params: Parameters for the request
     - optFields {[String]}:  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     - optPretty {Boolean}:  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
Tasks.prototype.getTask = function(
    taskGid,
    params,
    dispatchOptions
) {
    var path = "/tasks/{task_gid}".replace("{task_gid}", taskGid);

    return this.dispatchGet(path, params, dispatchOptions)
};


/**
 * Get multiple tasks
 * @param {Object} params: Parameters for the request
     - assignee {String}:  The assignee to filter tasks on. If searching for unassigned tasks, assignee.any = null can be specified. *Note: If you specify `assignee`, you must also specify the `workspace` to filter on.*
     - project {String}:  The project to filter tasks on.
     - section {String}:  The section to filter tasks on. *Note: Currently, this is only supported in board views.*
     - workspace {String}:  The workspace to filter tasks on. *Note: If you specify `workspace`, you must also specify the `assignee` to filter on.*
     - completedSince {Date}:  Only return tasks that are either incomplete or that have been completed since this time.
     - modifiedSince {Date}:  Only return tasks that have been modified since the given time.  *Note: A task is considered “modified” if any of its properties change, or associations between it and other objects are modified (e.g.  a task being added to a project). A task is not considered modified just because another object it is associated with (e.g. a subtask) is modified. Actions that count as modifying the task include assigning, renaming, completing, and adding stories.*
     - offset {String}:  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     - limit {Number}:  Results per page. The number of objects to return per page. The value must be between 1 and 100.
     - optFields {[String]}:  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     - optPretty {Boolean}:  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
Tasks.prototype.getTasks = function(
    params,
    dispatchOptions
) {
    var path = "/tasks";

    return this.dispatchGetCollection(path, params, dispatchOptions)
};


/**
 * Get tasks from a project
 * @param {String} projectGid: (required) Globally unique identifier for the project.
 * @param {Object} params: Parameters for the request
     - completedSince {String}:  Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*. 
     - offset {String}:  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     - limit {Number}:  Results per page. The number of objects to return per page. The value must be between 1 and 100.
     - optFields {[String]}:  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     - optPretty {Boolean}:  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
Tasks.prototype.getTasksForProject = function(
    projectGid,
    params,
    dispatchOptions
) {
    var path = "/projects/{project_gid}/tasks".replace("{project_gid}", projectGid);

    return this.dispatchGetCollection(path, params, dispatchOptions)
};


/**
 * Get tasks from a section
 * @param {String} sectionGid: (required) The globally unique identifier for the section.
 * @param {Object} params: Parameters for the request
     - offset {String}:  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     - limit {Number}:  Results per page. The number of objects to return per page. The value must be between 1 and 100.
     - optFields {[String]}:  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     - optPretty {Boolean}:  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
Tasks.prototype.getTasksForSection = function(
    sectionGid,
    params,
    dispatchOptions
) {
    var path = "/sections/{section_gid}/tasks".replace("{section_gid}", sectionGid);

    return this.dispatchGetCollection(path, params, dispatchOptions)
};


/**
 * Get tasks from a tag
 * @param {String} tagGid: (required) Globally unique identifier for the tag.
 * @param {Object} params: Parameters for the request
     - offset {String}:  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     - limit {Number}:  Results per page. The number of objects to return per page. The value must be between 1 and 100.
     - optFields {[String]}:  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     - optPretty {Boolean}:  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
Tasks.prototype.getTasksForTag = function(
    tagGid,
    params,
    dispatchOptions
) {
    var path = "/tags/{tag_gid}/tasks".replace("{tag_gid}", tagGid);

    return this.dispatchGetCollection(path, params, dispatchOptions)
};


/**
 * Get tasks from a user task list
 * @param {String} userTaskListGid: (required) Globally unique identifier for the user task list.
 * @param {Object} params: Parameters for the request
     - completedSince {String}:  Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*. 
     - offset {String}:  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     - limit {Number}:  Results per page. The number of objects to return per page. The value must be between 1 and 100.
     - optFields {[String]}:  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     - optPretty {Boolean}:  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
Tasks.prototype.getTasksForUserTaskList = function(
    userTaskListGid,
    params,
    dispatchOptions
) {
    var path = "/user_task_lists/{user_task_list_gid}/tasks".replace("{user_task_list_gid}", userTaskListGid);

    return this.dispatchGetCollection(path, params, dispatchOptions)
};


/**
 * Unlink dependencies from a task
 * @param {String} taskGid: (required) The task to operate on.
 * @param {Object} data: Data for the request
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
Tasks.prototype.removeDependenciesForTask = function(
    taskGid,
    data,
    dispatchOptions
) {
    var path = "/tasks/{task_gid}/removeDependencies".replace("{task_gid}", taskGid);

    return this.dispatchPost(path, data, dispatchOptions)
};


/**
 * Unlink dependents from a task
 * @param {String} taskGid: (required) The task to operate on.
 * @param {Object} data: Data for the request
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
Tasks.prototype.removeDependentsForTask = function(
    taskGid,
    data,
    dispatchOptions
) {
    var path = "/tasks/{task_gid}/removeDependents".replace("{task_gid}", taskGid);

    return this.dispatchPost(path, data, dispatchOptions)
};


/**
 * Remove followers from a task
 * @param {String} taskGid: (required) The task to operate on.
 * @param {Object} data: Data for the request
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
Tasks.prototype.removeFollowerForTask = function(
    taskGid,
    data,
    dispatchOptions
) {
    var path = "/tasks/{task_gid}/removeFollowers".replace("{task_gid}", taskGid);

    return this.dispatchPost(path, data, dispatchOptions)
};


/**
 * Remove a project from a task
 * @param {String} taskGid: (required) The task to operate on.
 * @param {Object} data: Data for the request
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
Tasks.prototype.removeProjectForTask = function(
    taskGid,
    data,
    dispatchOptions
) {
    var path = "/tasks/{task_gid}/removeProject".replace("{task_gid}", taskGid);

    return this.dispatchPost(path, data, dispatchOptions)
};


/**
 * Remove a tag from a task
 * @param {String} taskGid: (required) The task to operate on.
 * @param {Object} data: Data for the request
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
Tasks.prototype.removeTagForTask = function(
    taskGid,
    data,
    dispatchOptions
) {
    var path = "/tasks/{task_gid}/removeTag".replace("{task_gid}", taskGid);

    return this.dispatchPost(path, data, dispatchOptions)
};


/**
 * Search tasks in a workspace
 * @param {String} workspaceGid: (required) Globally unique identifier for the workspace or organization.
 * @param {Object} params: Parameters for the request
     - text {String}:  Performs full-text search on both task name and description
     - resourceSubtype {String}:  Filters results by the task's resource_subtype
     - assigneeAny {String}:  Comma-separated list of user identifiers
     - assigneeNot {String}:  Comma-separated list of user identifiers
     - portfoliosAny {String}:  Comma-separated list of portfolio IDs
     - projectsAny {String}:  Comma-separated list of project IDs
     - projectsNot {String}:  Comma-separated list of project IDs
     - projectsAll {String}:  Comma-separated list of project IDs
     - sectionsAny {String}:  Comma-separated list of section or column IDs
     - sectionsNot {String}:  Comma-separated list of section or column IDs
     - sectionsAll {String}:  Comma-separated list of section or column IDs
     - tagsAny {String}:  Comma-separated list of tag IDs
     - tagsNot {String}:  Comma-separated list of tag IDs
     - tagsAll {String}:  Comma-separated list of tag IDs
     - teamsAny {String}:  Comma-separated list of team IDs
     - followersNot {String}:  Comma-separated list of user identifiers
     - createdByAny {String}:  Comma-separated list of user identifiers
     - createdByNot {String}:  Comma-separated list of user identifiers
     - assignedByAny {String}:  Comma-separated list of user identifiers
     - assignedByNot {String}:  Comma-separated list of user identifiers
     - likedByNot {String}:  Comma-separated list of user identifiers
     - commentedOnByNot {String}:  Comma-separated list of user identifiers
     - dueOnBefore {Date}:  ISO 8601 date string
     - dueOnAfter {Date}:  ISO 8601 date string
     - dueOn {Date}:  ISO 8601 date string or `null`
     - dueAtBefore {Date}:  ISO 8601 datetime string
     - dueAtAfter {Date}:  ISO 8601 datetime string
     - startOnBefore {Date}:  ISO 8601 date string
     - startOnAfter {Date}:  ISO 8601 date string
     - startOn {Date}:  ISO 8601 date string or `null`
     - createdOnBefore {Date}:  ISO 8601 date string
     - createdOnAfter {Date}:  ISO 8601 date string
     - createdOn {Date}:  ISO 8601 date string or `null`
     - createdAtBefore {Date}:  ISO 8601 datetime string
     - createdAtAfter {Date}:  ISO 8601 datetime string
     - completedOnBefore {Date}:  ISO 8601 date string
     - completedOnAfter {Date}:  ISO 8601 date string
     - completedOn {Date}:  ISO 8601 date string or `null`
     - completedAtBefore {Date}:  ISO 8601 datetime string
     - completedAtAfter {Date}:  ISO 8601 datetime string
     - modifiedOnBefore {Date}:  ISO 8601 date string
     - modifiedOnAfter {Date}:  ISO 8601 date string
     - modifiedOn {Date}:  ISO 8601 date string or `null`
     - modifiedAtBefore {Date}:  ISO 8601 datetime string
     - modifiedAtAfter {Date}:  ISO 8601 datetime string
     - isBlocking {Boolean}:  Filter to incomplete tasks with dependents
     - isBlocked {Boolean}:  Filter to tasks with incomplete dependencies
     - hasAttachment {Boolean}:  Filter to tasks with attachments
     - completed {Boolean}:  Filter to completed tasks
     - isSubtask {Boolean}:  Filter to subtasks
     - sortBy {String}:  One of `due_date`, `created_at`, `completed_at`, `likes`, or `modified_at`, defaults to `modified_at`
     - sortAscending {Boolean}:  Default `false`
     - optFields {[String]}:  Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     - optPretty {Boolean}:  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
Tasks.prototype.searchTasksForWorkspace = function(
    workspaceGid,
    params,
    dispatchOptions
) {
    var path = "/workspaces/{workspace_gid}/tasks/search".replace("{workspace_gid}", workspaceGid);

    return this.dispatchGetCollection(path, params, dispatchOptions)
};


/**
 * Set the parent of a task
 * @param {String} taskGid: (required) The task to operate on.
 * @param {Object} data: Data for the request
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
Tasks.prototype.setParentForTask = function(
    taskGid,
    data,
    dispatchOptions
) {
    var path = "/tasks/{task_gid}/setParent".replace("{task_gid}", taskGid);

    return this.dispatchPost(path, data, dispatchOptions)
};


/**
 * Update a task
 * @param {String} taskGid: (required) The task to operate on.
 * @param {Object} data: Data for the request
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
Tasks.prototype.updateTask = function(
    taskGid,
    data,
    dispatchOptions
) {
    var path = "/tasks/{task_gid}".replace("{task_gid}", taskGid);

    return this.dispatchPut(path, data, dispatchOptions)
};

module.exports = Tasks;
/* jshint ignore:end */
