/**
 * This file is auto-generated by our openapi spec.
 * We try to keep the generated code pretty clean but there will be lint
 * errors that are just not worth fixing (like unused requires).
 * TODO: maybe we can just disable those specifically and keep this code
 * pretty lint-free too!
 */
/* jshint ignore:start */
var Resource = require('../resource');
var util = require('util');
var _ = require('lodash');

function UserTaskLists(dispatcher) {
    Resource.call(this, dispatcher);
}
util.inherits(UserTaskLists, Resource);


/**
 * Get a user task list
 * @param {String} userTaskListGid: (required) Globally unique identifier for the user task list.
 * @param {Object} params: Parameters for the request
     - optFields {[String]}:  This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     - optPretty {Boolean}:  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
UserTaskLists.prototype.getUserTaskList = function(
    userTaskListGid,
    params,
    dispatchOptions
) {
    var path = "/user_task_lists/{user_task_list_gid}".replace("{user_task_list_gid}", userTaskListGid);

    return this.dispatchGet(path, params, dispatchOptions)
};


/**
 * Get a user's task list
 * @param {String} userGid: (required) A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.
 * @param {Object} params: Parameters for the request
     - workspace {String}:  (required) The workspace in which to get the user task list.
     - optFields {[String]}:  This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     - optPretty {Boolean}:  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
UserTaskLists.prototype.getUserTaskListForUser = function(
    userGid,
    params,
    dispatchOptions
) {
    var path = "/users/{user_gid}/user_task_list".replace("{user_gid}", userGid);

    return this.dispatchGet(path, params, dispatchOptions)
};

module.exports = UserTaskLists;
/* jshint ignore:end */
