/**
 * This file is auto-generated by our openapi spec.
 * We try to keep the generated code pretty clean but there will be lint
 * errors that are just not worth fixing (like unused requires).
 * TODO: maybe we can just disable those specifically and keep this code
 * pretty lint-free too!
 */
/* jshint ignore:start */
var Resource = require('../resource');
var util = require('util');
var _ = require('lodash');

function TimeTrackingEntries(dispatcher) {
    Resource.call(this, dispatcher);
}
util.inherits(TimeTrackingEntries, Resource);


/**
 * Create a time tracking entry
 * @param {String} taskGid: (required) The task to operate on.
 * @param {Object} data: Data for the request
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
TimeTrackingEntries.prototype.createTimeTrackingEntry = function(
    taskGid,
    data,
    dispatchOptions
) {
    var path = "/tasks/{task_gid}/time_tracking_entries".replace("{task_gid}", taskGid);

    return this.dispatchPost(path, data, dispatchOptions)
};


/**
 * Delete a time tracking entry
 * @param {String} timeTrackingEntryGid: (required) Globally unique identifier for the time tracking entry.
 * @param {Object} data: Data for the request
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
TimeTrackingEntries.prototype.deleteTimeTrackingEntry = function(
    timeTrackingEntryGid,
    data,
    dispatchOptions
) {
    var path = "/time_tracking_entries/{time_tracking_entry_gid}".replace("{time_tracking_entry_gid}", timeTrackingEntryGid);

    return this.dispatchDelete(path, data, dispatchOptions)
};


/**
 * Get time tracking entries for a task
 * @param {String} taskGid: (required) The task to operate on.
 * @param {Object} params: Parameters for the request
     - offset {String}:  Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
     - limit {Number}:  Results per page. The number of objects to return per page. The value must be between 1 and 100.
     - optFields {[String]}:  This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     - optPretty {Boolean}:  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
TimeTrackingEntries.prototype.getTimeTrackingEntriesForTask = function(
    taskGid,
    params,
    dispatchOptions
) {
    var path = "/tasks/{task_gid}/time_tracking_entries".replace("{task_gid}", taskGid);

    return this.dispatchGetCollection(path, params, dispatchOptions)
};


/**
 * Get a time tracking entry
 * @param {String} timeTrackingEntryGid: (required) Globally unique identifier for the time tracking entry.
 * @param {Object} params: Parameters for the request
     - optFields {[String]}:  This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     - optPretty {Boolean}:  Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
TimeTrackingEntries.prototype.getTimeTrackingEntry = function(
    timeTrackingEntryGid,
    params,
    dispatchOptions
) {
    var path = "/time_tracking_entries/{time_tracking_entry_gid}".replace("{time_tracking_entry_gid}", timeTrackingEntryGid);

    return this.dispatchGet(path, params, dispatchOptions)
};


/**
 * Update a time tracking entry
 * @param {String} timeTrackingEntryGid: (required) Globally unique identifier for the time tracking entry.
 * @param {Object} data: Data for the request
 * @param {Object} [dispatchOptions]: Options, if any, to pass the dispatcher for the request
 * @return {Promise} The requested resource
 */
TimeTrackingEntries.prototype.updateTimeTrackingEntry = function(
    timeTrackingEntryGid,
    data,
    dispatchOptions
) {
    var path = "/time_tracking_entries/{time_tracking_entry_gid}".replace("{time_tracking_entry_gid}", timeTrackingEntryGid);

    return this.dispatchPut(path, data, dispatchOptions)
};

module.exports = TimeTrackingEntries;
/* jshint ignore:end */
