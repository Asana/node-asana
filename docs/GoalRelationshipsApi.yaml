GoalRelationshipsApi:
  addSupportingRelationship: |-
    const Asana = require('asana');
    let defaultClient = Asana.ApiClient.instance;

    // Configure OAuth2 access token for authorization: oauth2
    let oauth2 = defaultClient.authentications['oauth2'];
    oauth2.accessToken = '<YOUR_PERSONAL_ACCESS_TOKEN>';
    
    let apiInstance = new Asana.GoalRelationshipsApi();
    let body = new Asana.GoalGidAddSupportingRelationshipBody.constructFromObject({data: {param1: "value1", param2: "value2",}}); // GoalGidAddSupportingRelationshipBody | The supporting resource to be added to the goal
    let goal_gid = "12345"; // String | Globally unique identifier for the goal.
    let opts = { 
        'opt_fields': ["contribution_weight","resource_subtype","supported_goal","supported_goal.name","supported_goal.owner","supported_goal.owner.name","supporting_resource","supporting_resource.name"] // [String] | This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    };
    apiInstance.addSupportingRelationship(bodygoal_gid, opts, (error, data, response) => {
        if (error) {
            console.error(error);
        } else {
            console.log('API called successfully. Returned data: ' + JSON.stringify(data, null, 2));
        }
    });
  getGoalRelationship: |-
    const Asana = require('asana');
    let defaultClient = Asana.ApiClient.instance;

    // Configure OAuth2 access token for authorization: oauth2
    let oauth2 = defaultClient.authentications['oauth2'];
    oauth2.accessToken = '<YOUR_PERSONAL_ACCESS_TOKEN>';
    
    let apiInstance = new Asana.GoalRelationshipsApi();
    let goal_relationship_gid = "12345"; // String | Globally unique identifier for the goal relationship.
    let opts = { 
        'opt_fields': ["contribution_weight","resource_subtype","supported_goal","supported_goal.name","supported_goal.owner","supported_goal.owner.name","supporting_resource","supporting_resource.name"] // [String] | This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    };
    apiInstance.getGoalRelationship(goal_relationship_gid, opts, (error, data, response) => {
        if (error) {
            console.error(error);
        } else {
            console.log('API called successfully. Returned data: ' + JSON.stringify(data, null, 2));
        }
    });
  getGoalRelationships: |-
    const Asana = require('asana');
    let defaultClient = Asana.ApiClient.instance;

    // Configure OAuth2 access token for authorization: oauth2
    let oauth2 = defaultClient.authentications['oauth2'];
    oauth2.accessToken = '<YOUR_PERSONAL_ACCESS_TOKEN>';
    
    let apiInstance = new Asana.GoalRelationshipsApi();
    let supported_goal = "12345"; // String | Globally unique identifier for the supported goal in the goal relationship.
    let opts = { 
        'limit': 50, // Number | Results per page. The number of objects to return per page. The value must be between 1 and 100.
        'offset': "eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9", // String | Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
        'resource_subtype': "subgoal", // String | If provided, filter to goal relationships with a given resource_subtype.
        'opt_fields': ["contribution_weight","offset","path","resource_subtype","supported_goal","supported_goal.name","supported_goal.owner","supported_goal.owner.name","supporting_resource","supporting_resource.name","uri"] // [String] | This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    };
    apiInstance.getGoalRelationships(supported_goal, opts, (error, data, response) => {
        if (error) {
            console.error(error);
        } else {
            console.log('API called successfully. Returned data: ' + JSON.stringify(data, null, 2));
        }
    });
  removeSupportingRelationship: |-
    const Asana = require('asana');
    let defaultClient = Asana.ApiClient.instance;

    // Configure OAuth2 access token for authorization: oauth2
    let oauth2 = defaultClient.authentications['oauth2'];
    oauth2.accessToken = '<YOUR_PERSONAL_ACCESS_TOKEN>';
    
    let apiInstance = new Asana.GoalRelationshipsApi();
    let body = new Asana.GoalGidRemoveSupportingRelationshipBody.constructFromObject({data: {param1: "value1", param2: "value2",}}); // GoalGidRemoveSupportingRelationshipBody | The supporting resource to be removed from the goal
    let goal_gid = "12345"; // String | Globally unique identifier for the goal.

    apiInstance.removeSupportingRelationship(bodygoal_gid, (error, data, response) => {
        if (error) {
            console.error(error);
        } else {
            console.log('API called successfully. Returned data: ' + JSON.stringify(data, null, 2));
        }
    });
  updateGoalRelationship: |-
    const Asana = require('asana');
    let defaultClient = Asana.ApiClient.instance;

    // Configure OAuth2 access token for authorization: oauth2
    let oauth2 = defaultClient.authentications['oauth2'];
    oauth2.accessToken = '<YOUR_PERSONAL_ACCESS_TOKEN>';
    
    let apiInstance = new Asana.GoalRelationshipsApi();
    let body = new Asana.GoalRelationshipsGoalRelationshipGidBody.constructFromObject({data: {param1: "value1", param2: "value2",}}); // GoalRelationshipsGoalRelationshipGidBody | The updated fields for the goal relationship.
    let goal_relationship_gid = "12345"; // String | Globally unique identifier for the goal relationship.
    let opts = { 
        'opt_fields': ["contribution_weight","resource_subtype","supported_goal","supported_goal.name","supported_goal.owner","supported_goal.owner.name","supporting_resource","supporting_resource.name"] // [String] | This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    };
    apiInstance.updateGoalRelationship(bodygoal_relationship_gid, opts, (error, data, response) => {
        if (error) {
            console.error(error);
        } else {
            console.log('API called successfully. Returned data: ' + JSON.stringify(data, null, 2));
        }
    });
