AllocationsApi:
  createAllocation: |-
    const Asana = require('asana');
    
    let client = Asana.ApiClient.instance;
    let token = client.authentications['token'];
    token.accessToken = '<YOUR_ACCESS_TOKEN>';
    
    let allocationsApiInstance = new Asana.AllocationsApi();
    let body = {"data": {"<PARAM_1>": "<VALUE_1>", "<PARAM_2>": "<VALUE_2>",}}; // Object | The allocation to create.
    let opts = { 
        'opt_fields': "assignee,assignee.name,created_by,created_by.name,effort,effort.type,effort.value,end_date,parent,parent.name,resource_subtype,start_date"
    };
    allocationsApiInstance.createAllocation(body, opts).then((result) => {
        console.log('API called successfully. Returned data: ' + JSON.stringify(result.data, null, 2));
    }, (error) => {
        console.error(error.response.body);
    });
    
  deleteAllocation: |-
    const Asana = require('asana');
    
    let client = Asana.ApiClient.instance;
    let token = client.authentications['token'];
    token.accessToken = '<YOUR_ACCESS_TOKEN>';
    
    let allocationsApiInstance = new Asana.AllocationsApi();
    let allocation_gid = "77688"; // String | Globally unique identifier for the allocation.

    allocationsApiInstance.deleteAllocation(allocation_gid).then((result) => {
        console.log('API called successfully. Returned data: ' + JSON.stringify(result.data, null, 2));
    }, (error) => {
        console.error(error.response.body);
    });
    
  getAllocation: |-
    const Asana = require('asana');
    
    let client = Asana.ApiClient.instance;
    let token = client.authentications['token'];
    token.accessToken = '<YOUR_ACCESS_TOKEN>';
    
    let allocationsApiInstance = new Asana.AllocationsApi();
    let allocation_gid = "77688"; // String | Globally unique identifier for the allocation.
    let opts = { 
        'opt_fields': "assignee,assignee.name,created_by,created_by.name,effort,effort.type,effort.value,end_date,parent,parent.name,resource_subtype,start_date"
    };
    allocationsApiInstance.getAllocation(allocation_gid, opts).then((result) => {
        console.log('API called successfully. Returned data: ' + JSON.stringify(result.data, null, 2));
    }, (error) => {
        console.error(error.response.body);
    });
    
  getAllocations: |-
    const Asana = require('asana');
    
    let client = Asana.ApiClient.instance;
    let token = client.authentications['token'];
    token.accessToken = '<YOUR_ACCESS_TOKEN>';
    
    let allocationsApiInstance = new Asana.AllocationsApi();
    let opts = { 
        'parent': "77688", 
        'assignee': "12345", 
        'workspace': "98765", 
        'limit': 50, 
        'offset': "eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9", 
        'opt_fields': "assignee,assignee.name,created_by,created_by.name,effort,effort.type,effort.value,end_date,offset,parent,parent.name,path,resource_subtype,start_date,uri"
    };
    allocationsApiInstance.getAllocations(opts).then((result) => {
        console.log('API called successfully. Returned data: ' + JSON.stringify(result.data, null, 2));
    }, (error) => {
        console.error(error.response.body);
    });
    
  updateAllocation: |-
    const Asana = require('asana');
    
    let client = Asana.ApiClient.instance;
    let token = client.authentications['token'];
    token.accessToken = '<YOUR_ACCESS_TOKEN>';
    
    let allocationsApiInstance = new Asana.AllocationsApi();
    let body = {"data": {"<PARAM_1>": "<VALUE_1>", "<PARAM_2>": "<VALUE_2>",}}; // Object | The updated fields for the allocation.
    let allocation_gid = "77688"; // String | Globally unique identifier for the allocation.
    let opts = { 
        'opt_fields': "assignee,assignee.name,created_by,created_by.name,effort,effort.type,effort.value,end_date,parent,parent.name,resource_subtype,start_date"
    };
    allocationsApiInstance.updateAllocation(body, allocation_gid, opts).then((result) => {
        console.log('API called successfully. Returned data: ' + JSON.stringify(result.data, null, 2));
    }, (error) => {
        console.error(error.response.body);
    });
    
