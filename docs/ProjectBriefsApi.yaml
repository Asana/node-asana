ProjectBriefsApi:
  createProjectBrief: |-
    const Asana = require('asana');
    let defaultClient = Asana.ApiClient.instance;

    // Configure OAuth2 access token for authorization: oauth2
    let oauth2 = defaultClient.authentications['oauth2'];
    oauth2.accessToken = '<YOUR_PERSONAL_ACCESS_TOKEN>';
    
    let apiInstance = new Asana.ProjectBriefsApi();
    let body = new Asana.ProjectGidProjectBriefsBody.constructFromObject({data: {param1: "value1", param2: "value2",}}); // ProjectGidProjectBriefsBody | The project brief to create.
    let project_gid = "1331"; // String | Globally unique identifier for the project.
    let opts = { 
        'opt_fields': ["html_text","permalink_url","project","project.name","text","title"] // [String] | This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    };
    apiInstance.createProjectBrief(bodyproject_gid, opts, (error, data, response) => {
        if (error) {
            console.error(error);
        } else {
            console.log('API called successfully. Returned data: ' + JSON.stringify(data, null, 2));
        }
    });
  deleteProjectBrief: |-
    const Asana = require('asana');
    let defaultClient = Asana.ApiClient.instance;

    // Configure OAuth2 access token for authorization: oauth2
    let oauth2 = defaultClient.authentications['oauth2'];
    oauth2.accessToken = '<YOUR_PERSONAL_ACCESS_TOKEN>';
    
    let apiInstance = new Asana.ProjectBriefsApi();
    let project_brief_gid = "12345"; // String | Globally unique identifier for the project brief.

    apiInstance.deleteProjectBrief(project_brief_gid, (error, data, response) => {
        if (error) {
            console.error(error);
        } else {
            console.log('API called successfully. Returned data: ' + JSON.stringify(data, null, 2));
        }
    });
  getProjectBrief: |-
    const Asana = require('asana');
    let defaultClient = Asana.ApiClient.instance;

    // Configure OAuth2 access token for authorization: oauth2
    let oauth2 = defaultClient.authentications['oauth2'];
    oauth2.accessToken = '<YOUR_PERSONAL_ACCESS_TOKEN>';
    
    let apiInstance = new Asana.ProjectBriefsApi();
    let project_brief_gid = "12345"; // String | Globally unique identifier for the project brief.
    let opts = { 
        'opt_fields': ["html_text","permalink_url","project","project.name","text","title"] // [String] | This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    };
    apiInstance.getProjectBrief(project_brief_gid, opts, (error, data, response) => {
        if (error) {
            console.error(error);
        } else {
            console.log('API called successfully. Returned data: ' + JSON.stringify(data, null, 2));
        }
    });
  updateProjectBrief: |-
    const Asana = require('asana');
    let defaultClient = Asana.ApiClient.instance;

    // Configure OAuth2 access token for authorization: oauth2
    let oauth2 = defaultClient.authentications['oauth2'];
    oauth2.accessToken = '<YOUR_PERSONAL_ACCESS_TOKEN>';
    
    let apiInstance = new Asana.ProjectBriefsApi();
    let body = new Asana.ProjectBriefsProjectBriefGidBody.constructFromObject({data: {param1: "value1", param2: "value2",}}); // ProjectBriefsProjectBriefGidBody | The updated fields for the project brief.
    let project_brief_gid = "12345"; // String | Globally unique identifier for the project brief.
    let opts = { 
        'opt_fields': ["html_text","permalink_url","project","project.name","text","title"] // [String] | This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    };
    apiInstance.updateProjectBrief(bodyproject_brief_gid, opts, (error, data, response) => {
        if (error) {
            console.error(error);
        } else {
            console.log('API called successfully. Returned data: ' + JSON.stringify(data, null, 2));
        }
    });
