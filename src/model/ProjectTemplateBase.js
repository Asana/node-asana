/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {ProjectTemplateBaseRequestedDates} from './ProjectTemplateBaseRequestedDates';
import {ProjectTemplateBaseRequestedRoles} from './ProjectTemplateBaseRequestedRoles';
import {ProjectTemplateBaseTeam} from './ProjectTemplateBaseTeam';

/**
 * The ProjectTemplateBase model module.
 * @module model/ProjectTemplateBase
 * @version 2.0.3
 */
export class ProjectTemplateBase {
  /**
   * Constructs a new <code>ProjectTemplateBase</code>.
   * A generic Asana Resource, containing a globally unique identifier.A generic Asana Resource, containing a globally unique identifier. A *project template* is an object that allows new projects to be created with a predefined setup, which may include tasks, sections, Rules, etc. It simplifies the process of running a workflow that involves a similar set of work every time.
   * @alias module:model/ProjectTemplateBase
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>ProjectTemplateBase</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ProjectTemplateBase} obj Optional instance to populate.
   * @return {module:model/ProjectTemplateBase} The populated <code>ProjectTemplateBase</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ProjectTemplateBase();
      if (data.hasOwnProperty('gid'))
        obj.gid = ApiClient.convertToType(data['gid'], 'String');
      if (data.hasOwnProperty('resource_type'))
        obj.resource_type = ApiClient.convertToType(data['resource_type'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('html_description'))
        obj.html_description = ApiClient.convertToType(data['html_description'], 'String');
      if (data.hasOwnProperty('public'))
        obj._public = ApiClient.convertToType(data['public'], 'Boolean');
      if (data.hasOwnProperty('owner'))
        obj.owner = ApiClient.convertToType(data['owner'], Object);
      if (data.hasOwnProperty('team'))
        obj.team = ProjectTemplateBaseTeam.constructFromObject(data['team']);
      if (data.hasOwnProperty('requested_dates'))
        obj.requested_dates = ApiClient.convertToType(data['requested_dates'], [ProjectTemplateBaseRequestedDates]);
      if (data.hasOwnProperty('color'))
        obj.color = ApiClient.convertToType(data['color'], 'String');
      if (data.hasOwnProperty('requested_roles'))
        obj.requested_roles = ApiClient.convertToType(data['requested_roles'], [ProjectTemplateBaseRequestedRoles]);
    }
    return obj;
  }
}

/**
 * Globally unique identifier of the resource, as a string.
 * @member {String} gid
 */
ProjectTemplateBase.prototype.gid = undefined;

/**
 * The base type of this resource.
 * @member {String} resource_type
 */
ProjectTemplateBase.prototype.resource_type = undefined;

/**
 * Name of the project template.
 * @member {String} name
 */
ProjectTemplateBase.prototype.name = undefined;

/**
 * Free-form textual information associated with the project template
 * @member {String} description
 */
ProjectTemplateBase.prototype.description = undefined;

/**
 * The description of the project template with formatting as HTML.
 * @member {String} html_description
 */
ProjectTemplateBase.prototype.html_description = undefined;

/**
 * True if the project template is public to its team.
 * @member {Boolean} _public
 */
ProjectTemplateBase.prototype._public = undefined;

/**
 * The current owner of the project template, may be null.
 * @member {Object} owner
 */
ProjectTemplateBase.prototype.owner = undefined;

/**
 * @member {module:model/ProjectTemplateBaseTeam} team
 */
ProjectTemplateBase.prototype.team = undefined;

/**
 * Array of date variables in this project template. Calendar dates must be provided for these variables when instantiating a project.
 * @member {Array.<module:model/ProjectTemplateBaseRequestedDates>} requested_dates
 */
ProjectTemplateBase.prototype.requested_dates = undefined;

/**
 * Allowed values for the <code>color</code> property.
 * @enum {String}
 * @readonly
 */
ProjectTemplateBase.ColorEnum = {
  /**
   * value: "dark-pink"
   * @const
   */
  dark_pink: "dark-pink",

  /**
   * value: "dark-green"
   * @const
   */
  dark_green: "dark-green",

  /**
   * value: "dark-blue"
   * @const
   */
  dark_blue: "dark-blue",

  /**
   * value: "dark-red"
   * @const
   */
  dark_red: "dark-red",

  /**
   * value: "dark-teal"
   * @const
   */
  dark_teal: "dark-teal",

  /**
   * value: "dark-brown"
   * @const
   */
  dark_brown: "dark-brown",

  /**
   * value: "dark-orange"
   * @const
   */
  dark_orange: "dark-orange",

  /**
   * value: "dark-purple"
   * @const
   */
  dark_purple: "dark-purple",

  /**
   * value: "dark-warm-gray"
   * @const
   */
  dark_warm_gray: "dark-warm-gray",

  /**
   * value: "light-pink"
   * @const
   */
  light_pink: "light-pink",

  /**
   * value: "light-green"
   * @const
   */
  light_green: "light-green",

  /**
   * value: "light-blue"
   * @const
   */
  light_blue: "light-blue",

  /**
   * value: "light-red"
   * @const
   */
  light_red: "light-red",

  /**
   * value: "light-teal"
   * @const
   */
  light_teal: "light-teal",

  /**
   * value: "light-brown"
   * @const
   */
  light_brown: "light-brown",

  /**
   * value: "light-orange"
   * @const
   */
  light_orange: "light-orange",

  /**
   * value: "light-purple"
   * @const
   */
  light_purple: "light-purple",

  /**
   * value: "light-warm-gray"
   * @const
   */
  light_warm_gray: "light-warm-gray",

  /**
   * value: "null"
   * @const
   */
  _null: "null"
};
/**
 * Color of the project template.
 * @member {module:model/ProjectTemplateBase.ColorEnum} color
 */
ProjectTemplateBase.prototype.color = undefined;

/**
 * Array of template roles in this project template. User Ids can be provided for these variables when instantiating a project to assign template tasks to the user.
 * @member {Array.<module:model/ProjectTemplateBaseRequestedRoles>} requested_roles
 */
ProjectTemplateBase.prototype.requested_roles = undefined;

