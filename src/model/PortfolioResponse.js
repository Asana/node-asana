/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {CustomFieldResponsePeopleValue} from './CustomFieldResponsePeopleValue';
import {JobBaseNewProjectTemplate} from './JobBaseNewProjectTemplate';
import {PortfolioResponseCurrentStatusUpdate} from './PortfolioResponseCurrentStatusUpdate';
import {PortfolioResponseCustomFieldSettings} from './PortfolioResponseCustomFieldSettings';
import {PortfolioResponseCustomFields} from './PortfolioResponseCustomFields';
import {PortfolioResponseWorkspace} from './PortfolioResponseWorkspace';

/**
 * The PortfolioResponse model module.
 * @module model/PortfolioResponse
 * @version 2.0.4
 */
export class PortfolioResponse {
  /**
   * Constructs a new <code>PortfolioResponse</code>.
   * A generic Asana Resource, containing a globally unique identifier.A generic Asana Resource, containing a globally unique identifier. A *portfolio* gives a high-level overview of the status of multiple initiatives in Asana. Portfolios provide a dashboard overview of the state of multiple projects, including a progress report and the most recent [project status](/reference/project-statuses) update. Portfolios have some restrictions on size. Each portfolio has a max of 500 items and, like projects, a max of 20 custom fields.
   * @alias module:model/PortfolioResponse
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>PortfolioResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PortfolioResponse} obj Optional instance to populate.
   * @return {module:model/PortfolioResponse} The populated <code>PortfolioResponse</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new PortfolioResponse();
      if (data.hasOwnProperty('gid'))
        obj.gid = ApiClient.convertToType(data['gid'], 'String');
      if (data.hasOwnProperty('resource_type'))
        obj.resource_type = ApiClient.convertToType(data['resource_type'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('color'))
        obj.color = ApiClient.convertToType(data['color'], 'String');
      if (data.hasOwnProperty('created_at'))
        obj.created_at = ApiClient.convertToType(data['created_at'], 'Date');
      if (data.hasOwnProperty('created_by'))
        obj.created_by = CustomFieldResponsePeopleValue.constructFromObject(data['created_by']);
      if (data.hasOwnProperty('custom_field_settings'))
        obj.custom_field_settings = ApiClient.convertToType(data['custom_field_settings'], [PortfolioResponseCustomFieldSettings]);
      if (data.hasOwnProperty('current_status_update'))
        obj.current_status_update = PortfolioResponseCurrentStatusUpdate.constructFromObject(data['current_status_update']);
      if (data.hasOwnProperty('due_on'))
        obj.due_on = ApiClient.convertToType(data['due_on'], 'Date');
      if (data.hasOwnProperty('custom_fields'))
        obj.custom_fields = ApiClient.convertToType(data['custom_fields'], [PortfolioResponseCustomFields]);
      if (data.hasOwnProperty('members'))
        obj.members = ApiClient.convertToType(data['members'], [CustomFieldResponsePeopleValue]);
      if (data.hasOwnProperty('owner'))
        obj.owner = CustomFieldResponsePeopleValue.constructFromObject(data['owner']);
      if (data.hasOwnProperty('start_on'))
        obj.start_on = ApiClient.convertToType(data['start_on'], 'Date');
      if (data.hasOwnProperty('workspace'))
        obj.workspace = PortfolioResponseWorkspace.constructFromObject(data['workspace']);
      if (data.hasOwnProperty('permalink_url'))
        obj.permalink_url = ApiClient.convertToType(data['permalink_url'], 'String');
      if (data.hasOwnProperty('public'))
        obj._public = ApiClient.convertToType(data['public'], 'Boolean');
      if (data.hasOwnProperty('project_templates'))
        obj.project_templates = ApiClient.convertToType(data['project_templates'], [JobBaseNewProjectTemplate]);
    }
    return obj;
  }
}

/**
 * Globally unique identifier of the resource, as a string.
 * @member {String} gid
 */
PortfolioResponse.prototype.gid = undefined;

/**
 * The base type of this resource.
 * @member {String} resource_type
 */
PortfolioResponse.prototype.resource_type = undefined;

/**
 * The name of the portfolio.
 * @member {String} name
 */
PortfolioResponse.prototype.name = undefined;

/**
 * Allowed values for the <code>color</code> property.
 * @enum {String}
 * @readonly
 */
PortfolioResponse.ColorEnum = {
  /**
   * value: "dark-pink"
   * @const
   */
  dark_pink: "dark-pink",

  /**
   * value: "dark-green"
   * @const
   */
  dark_green: "dark-green",

  /**
   * value: "dark-blue"
   * @const
   */
  dark_blue: "dark-blue",

  /**
   * value: "dark-red"
   * @const
   */
  dark_red: "dark-red",

  /**
   * value: "dark-teal"
   * @const
   */
  dark_teal: "dark-teal",

  /**
   * value: "dark-brown"
   * @const
   */
  dark_brown: "dark-brown",

  /**
   * value: "dark-orange"
   * @const
   */
  dark_orange: "dark-orange",

  /**
   * value: "dark-purple"
   * @const
   */
  dark_purple: "dark-purple",

  /**
   * value: "dark-warm-gray"
   * @const
   */
  dark_warm_gray: "dark-warm-gray",

  /**
   * value: "light-pink"
   * @const
   */
  light_pink: "light-pink",

  /**
   * value: "light-green"
   * @const
   */
  light_green: "light-green",

  /**
   * value: "light-blue"
   * @const
   */
  light_blue: "light-blue",

  /**
   * value: "light-red"
   * @const
   */
  light_red: "light-red",

  /**
   * value: "light-teal"
   * @const
   */
  light_teal: "light-teal",

  /**
   * value: "light-brown"
   * @const
   */
  light_brown: "light-brown",

  /**
   * value: "light-orange"
   * @const
   */
  light_orange: "light-orange",

  /**
   * value: "light-purple"
   * @const
   */
  light_purple: "light-purple",

  /**
   * value: "light-warm-gray"
   * @const
   */
  light_warm_gray: "light-warm-gray"
};
/**
 * Color of the portfolio.
 * @member {module:model/PortfolioResponse.ColorEnum} color
 */
PortfolioResponse.prototype.color = undefined;

/**
 * The time at which this resource was created.
 * @member {Date} created_at
 */
PortfolioResponse.prototype.created_at = undefined;

/**
 * @member {module:model/CustomFieldResponsePeopleValue} created_by
 */
PortfolioResponse.prototype.created_by = undefined;

/**
 * Array of custom field settings applied to the portfolio.
 * @member {Array.<module:model/PortfolioResponseCustomFieldSettings>} custom_field_settings
 */
PortfolioResponse.prototype.custom_field_settings = undefined;

/**
 * @member {module:model/PortfolioResponseCurrentStatusUpdate} current_status_update
 */
PortfolioResponse.prototype.current_status_update = undefined;

/**
 * The localized day on which this portfolio is due. This takes a date with format YYYY-MM-DD.
 * @member {Date} due_on
 */
PortfolioResponse.prototype.due_on = undefined;

/**
 * Array of Custom Fields.
 * @member {Array.<module:model/PortfolioResponseCustomFields>} custom_fields
 */
PortfolioResponse.prototype.custom_fields = undefined;

/**
 * @member {Array.<module:model/CustomFieldResponsePeopleValue>} members
 */
PortfolioResponse.prototype.members = undefined;

/**
 * @member {module:model/CustomFieldResponsePeopleValue} owner
 */
PortfolioResponse.prototype.owner = undefined;

/**
 * The day on which work for this portfolio begins, or null if the portfolio has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` must be present in the request when setting or unsetting the `start_on` parameter. Additionally, `start_on` and `due_on` cannot be the same date.*
 * @member {Date} start_on
 */
PortfolioResponse.prototype.start_on = undefined;

/**
 * @member {module:model/PortfolioResponseWorkspace} workspace
 */
PortfolioResponse.prototype.workspace = undefined;

/**
 * A url that points directly to the object within Asana.
 * @member {String} permalink_url
 */
PortfolioResponse.prototype.permalink_url = undefined;

/**
 * True if the portfolio is public to its workspace members.
 * @member {Boolean} _public
 */
PortfolioResponse.prototype._public = undefined;

/**
 * Array of project templates that are in the portfolio
 * @member {Array.<module:model/JobBaseNewProjectTemplate>} project_templates
 */
PortfolioResponse.prototype.project_templates = undefined;

