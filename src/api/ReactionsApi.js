/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
var Collection = require('../utils/collection');

/**
* Reactions service.
* @module api/ReactionsApi
* @version 3.1.2
*/
export class ReactionsApi {

    /**
    * Constructs a new ReactionsApi. 
    * @alias module:api/ReactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get reactions with an emoji base on an object.
     * Returns the reactions with a specified emoji base character on the object.
     * @param {String} target Globally unique identifier for object to fetch reactions from. Must be a GID for a status update or story.
     * @param {String} emoji_base Only return reactions with this emoji base character.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data and HTTP response
     */
    getReactionsOnObjectWithHttpInfo(target, emoji_base, opts) {
        opts = opts || {};
        let postBody = null;
        // verify the required parameter 'target' is set
        if (target === undefined || target === null) {
            throw new Error("Missing the required parameter 'target' when calling getReactionsOnObject");
        }
        // verify the required parameter 'emoji_base' is set
        if (emoji_base === undefined || emoji_base === null) {
            throw new Error("Missing the required parameter 'emoji_base' when calling getReactionsOnObject");
        }

        let pathParams = {
            
        };
        let queryParams = {};
        opts = opts || {};
        queryParams = opts;
        queryParams['target'] = target;
        queryParams['emoji_base'] = emoji_base;

        let headerParams = {
            
        };
        let formParams = {
            
        };

        let authNames = ['personalAccessToken'];
        let contentTypes = [];
        let accepts = ['application/json; charset=UTF-8'];
        let returnType = 'Blob';
        // Check if RETURN_COLLECTION is set and return a collection object if it is
        if (this.apiClient.RETURN_COLLECTION) {
            return Collection.fromApiClient(
                this.apiClient.callApi(
                    '/reactions', 'GET',
                    pathParams, queryParams, headerParams, formParams, postBody,
                    authNames, contentTypes, accepts, returnType
                ),
                this.apiClient,
                {
                    'path': '/reactions',
                    'httpMethod': 'GET',
                    'pathParams': pathParams,
                    'queryParams': queryParams,
                    'headerParams': headerParams,
                    'formParams': formParams,
                    'bodyParam': postBody,
                    'authNames': authNames,
                    'contentTypes': contentTypes,
                    'accepts': accepts,
                    'returnType': returnType
                }
            )
        }

        return this.apiClient.callApi(
            '/reactions', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType
        );
    }

    /**
     * Get reactions with an emoji base on an object.
     * Returns the reactions with a specified emoji base character on the object.
     * @param {<&vendorExtensions.x-jsdoc-type>} target Globally unique identifier for object to fetch reactions from. Must be a GID for a status update or story.
     * @param {<&vendorExtensions.x-jsdoc-type>} emoji_base Only return reactions with this emoji base character.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ReactionCompactArray}
     */
    getReactionsOnObject(target, emoji_base, opts) {
        // Check if RETURN_COLLECTION is set and return a collection object if it is
        if (this.apiClient.RETURN_COLLECTION) {
            return this.getReactionsOnObjectWithHttpInfo(target, emoji_base, opts)
        }

        return this.getReactionsOnObjectWithHttpInfo(target, emoji_base, opts)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }

}
