/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CustomFieldSettingResponseData} from '../model/CustomFieldSettingResponseData';
import {EmptyResponseData} from '../model/EmptyResponseData';
import {ErrorResponse} from '../model/ErrorResponse';
import {PortfolioGidAddCustomFieldSettingBody} from '../model/PortfolioGidAddCustomFieldSettingBody';
import {PortfolioGidAddItemBody} from '../model/PortfolioGidAddItemBody';
import {PortfolioGidAddMembersBody} from '../model/PortfolioGidAddMembersBody';
import {PortfolioGidRemoveCustomFieldSettingBody} from '../model/PortfolioGidRemoveCustomFieldSettingBody';
import {PortfolioGidRemoveItemBody} from '../model/PortfolioGidRemoveItemBody';
import {PortfolioGidRemoveMembersBody} from '../model/PortfolioGidRemoveMembersBody';
import {PortfolioResponseArray} from '../model/PortfolioResponseArray';
import {PortfolioResponseData} from '../model/PortfolioResponseData';
import {PortfoliosBody} from '../model/PortfoliosBody';
import {PortfoliosPortfolioGidBody} from '../model/PortfoliosPortfolioGidBody';
import {ProjectResponseArray} from '../model/ProjectResponseArray';

/**
* Portfolios service.
* @module api/PortfoliosApi
* @version 2.0.6
*/
export class PortfoliosApi {

    /**
    * Constructs a new PortfoliosApi. 
    * @alias module:api/PortfoliosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addCustomFieldSettingForPortfolio operation.
     * @callback moduleapi/PortfoliosApi~addCustomFieldSettingForPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomFieldSettingResponseData{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a custom field to a portfolio
     * Custom fields are associated with portfolios by way of custom field settings.  This method creates a setting for the portfolio.
     * @param {module:model/PortfolioGidAddCustomFieldSettingBody} body Information about the custom field setting.
     * @param {String} portfolio_gid Globally unique identifier for the portfolio.
     * @param {module:api/PortfoliosApi~addCustomFieldSettingForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addCustomFieldSettingForPortfolio(body, portfolio_gid, callback) {
        
        let postBody = body;
        // verify the required parameter 'body' is set
        if (body === undefined || body === null) {
            throw new Error("Missing the required parameter 'body' when calling addCustomFieldSettingForPortfolio");
        }
        // verify the required parameter 'portfolio_gid' is set
        if (portfolio_gid === undefined || portfolio_gid === null) {
            throw new Error("Missing the required parameter 'portfolio_gid' when calling addCustomFieldSettingForPortfolio");
        }

        let pathParams = {
            'portfolio_gid': portfolio_gid
        };
        let queryParams = {
            
        };
        let headerParams = {
            
        };
        let formParams = {
            
        };

        let authNames = ['oauth2'];
        let contentTypes = ['application/json; charset=UTF-8'];
        let accepts = ['application/json; charset=UTF-8'];
        let returnType = CustomFieldSettingResponseData;

        return this.apiClient.callApi(
            '/portfolios/{portfolio_gid}/addCustomFieldSetting', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }
    /**
     * Callback function to receive the result of the addItemForPortfolio operation.
     * @callback moduleapi/PortfoliosApi~addItemForPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyResponseData{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a portfolio item
     * Add an item to a portfolio. Returns an empty data block.
     * @param {module:model/PortfolioGidAddItemBody} body Information about the item being inserted.
     * @param {String} portfolio_gid Globally unique identifier for the portfolio.
     * @param {module:api/PortfoliosApi~addItemForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addItemForPortfolio(body, portfolio_gid, callback) {
        
        let postBody = body;
        // verify the required parameter 'body' is set
        if (body === undefined || body === null) {
            throw new Error("Missing the required parameter 'body' when calling addItemForPortfolio");
        }
        // verify the required parameter 'portfolio_gid' is set
        if (portfolio_gid === undefined || portfolio_gid === null) {
            throw new Error("Missing the required parameter 'portfolio_gid' when calling addItemForPortfolio");
        }

        let pathParams = {
            'portfolio_gid': portfolio_gid
        };
        let queryParams = {
            
        };
        let headerParams = {
            
        };
        let formParams = {
            
        };

        let authNames = ['oauth2'];
        let contentTypes = ['application/json; charset=UTF-8'];
        let accepts = ['application/json; charset=UTF-8'];
        let returnType = EmptyResponseData;

        return this.apiClient.callApi(
            '/portfolios/{portfolio_gid}/addItem', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }
    /**
     * Callback function to receive the result of the addMembersForPortfolio operation.
     * @callback moduleapi/PortfoliosApi~addMembersForPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioResponseData{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add users to a portfolio
     * Adds the specified list of users as members of the portfolio. Returns the updated portfolio record.
     * @param {module:model/PortfolioGidAddMembersBody} body Information about the members being added.
     * @param {String} portfolio_gid Globally unique identifier for the portfolio.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @param {module:api/PortfoliosApi~addMembersForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addMembersForPortfolio(body, portfolio_gid, opts, callback) {
        opts = opts || {};
        let postBody = body;
        // verify the required parameter 'body' is set
        if (body === undefined || body === null) {
            throw new Error("Missing the required parameter 'body' when calling addMembersForPortfolio");
        }
        // verify the required parameter 'portfolio_gid' is set
        if (portfolio_gid === undefined || portfolio_gid === null) {
            throw new Error("Missing the required parameter 'portfolio_gid' when calling addMembersForPortfolio");
        }

        let pathParams = {
            'portfolio_gid': portfolio_gid
        };
        let queryParams = {
            'opt_fields': this.apiClient.buildCollectionParam(opts['opt_fields'], 'csv')
        };
        let headerParams = {
            
        };
        let formParams = {
            
        };

        let authNames = ['oauth2'];
        let contentTypes = ['application/json; charset=UTF-8'];
        let accepts = ['application/json; charset=UTF-8'];
        let returnType = PortfolioResponseData;

        return this.apiClient.callApi(
            '/portfolios/{portfolio_gid}/addMembers', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }
    /**
     * Callback function to receive the result of the createPortfolio operation.
     * @callback moduleapi/PortfoliosApi~createPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioResponseData{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a portfolio
     * Creates a new portfolio in the given workspace with the supplied name.  Note that portfolios created in the Asana UI may have some state (like the “Priority” custom field) which is automatically added to the portfolio when it is created. Portfolios created via our API will *not* be created with the same initial state to allow integrations to create their own starting state on a portfolio.
     * @param {module:model/PortfoliosBody} body The portfolio to create.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @param {module:api/PortfoliosApi~createPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createPortfolio(body, opts, callback) {
        opts = opts || {};
        let postBody = body;
        // verify the required parameter 'body' is set
        if (body === undefined || body === null) {
            throw new Error("Missing the required parameter 'body' when calling createPortfolio");
        }

        let pathParams = {
            
        };
        let queryParams = {
            'opt_fields': this.apiClient.buildCollectionParam(opts['opt_fields'], 'csv')
        };
        let headerParams = {
            
        };
        let formParams = {
            
        };

        let authNames = ['oauth2'];
        let contentTypes = ['application/json; charset=UTF-8'];
        let accepts = ['application/json; charset=UTF-8'];
        let returnType = PortfolioResponseData;

        return this.apiClient.callApi(
            '/portfolios', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }
    /**
     * Callback function to receive the result of the deletePortfolio operation.
     * @callback moduleapi/PortfoliosApi~deletePortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyResponseData{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a portfolio
     * An existing portfolio can be deleted by making a DELETE request on the URL for that portfolio.  Returns an empty data record.
     * @param {String} portfolio_gid Globally unique identifier for the portfolio.
     * @param {module:api/PortfoliosApi~deletePortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletePortfolio(portfolio_gid, callback) {
        
        let postBody = null;
        // verify the required parameter 'portfolio_gid' is set
        if (portfolio_gid === undefined || portfolio_gid === null) {
            throw new Error("Missing the required parameter 'portfolio_gid' when calling deletePortfolio");
        }

        let pathParams = {
            'portfolio_gid': portfolio_gid
        };
        let queryParams = {
            
        };
        let headerParams = {
            
        };
        let formParams = {
            
        };

        let authNames = ['oauth2'];
        let contentTypes = [];
        let accepts = ['application/json; charset=UTF-8'];
        let returnType = EmptyResponseData;

        return this.apiClient.callApi(
            '/portfolios/{portfolio_gid}', 'DELETE',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }
    /**
     * Callback function to receive the result of the getItemsForPortfolio operation.
     * @callback moduleapi/PortfoliosApi~getItemsForPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectResponseArray{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get portfolio items
     * Get a list of the items in compact form in a portfolio.
     * @param {String} portfolio_gid Globally unique identifier for the portfolio.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @param {module:api/PortfoliosApi~getItemsForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getItemsForPortfolio(portfolio_gid, opts, callback) {
        opts = opts || {};
        let postBody = null;
        // verify the required parameter 'portfolio_gid' is set
        if (portfolio_gid === undefined || portfolio_gid === null) {
            throw new Error("Missing the required parameter 'portfolio_gid' when calling getItemsForPortfolio");
        }

        let pathParams = {
            'portfolio_gid': portfolio_gid
        };
        let queryParams = {
            'limit': opts['limit'],'offset': opts['offset'],'opt_fields': this.apiClient.buildCollectionParam(opts['opt_fields'], 'csv')
        };
        let headerParams = {
            
        };
        let formParams = {
            
        };

        let authNames = ['oauth2'];
        let contentTypes = [];
        let accepts = ['application/json; charset=UTF-8'];
        let returnType = ProjectResponseArray;

        return this.apiClient.callApi(
            '/portfolios/{portfolio_gid}/items', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }
    /**
     * Callback function to receive the result of the getPortfolio operation.
     * @callback moduleapi/PortfoliosApi~getPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioResponseData{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a portfolio
     * Returns the complete portfolio record for a single portfolio.
     * @param {String} portfolio_gid Globally unique identifier for the portfolio.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @param {module:api/PortfoliosApi~getPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPortfolio(portfolio_gid, opts, callback) {
        opts = opts || {};
        let postBody = null;
        // verify the required parameter 'portfolio_gid' is set
        if (portfolio_gid === undefined || portfolio_gid === null) {
            throw new Error("Missing the required parameter 'portfolio_gid' when calling getPortfolio");
        }

        let pathParams = {
            'portfolio_gid': portfolio_gid
        };
        let queryParams = {
            'opt_fields': this.apiClient.buildCollectionParam(opts['opt_fields'], 'csv')
        };
        let headerParams = {
            
        };
        let formParams = {
            
        };

        let authNames = ['oauth2'];
        let contentTypes = [];
        let accepts = ['application/json; charset=UTF-8'];
        let returnType = PortfolioResponseData;

        return this.apiClient.callApi(
            '/portfolios/{portfolio_gid}', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }
    /**
     * Callback function to receive the result of the getPortfolios operation.
     * @callback moduleapi/PortfoliosApi~getPortfoliosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioResponseArray{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get multiple portfolios
     * Returns a list of the portfolios in compact representation that are owned by the current API user.
     * @param {String} workspace The workspace or organization to filter portfolios on.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#x27;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#x27;
     * @param {String} opts.owner The user who owns the portfolio. Currently, API users can only get a list of portfolios that they themselves own, unless the request is made from a Service Account. In the case of a Service Account, if this parameter is specified, then all portfolios owned by this parameter are returned. Otherwise, all portfolios across the workspace are returned.
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @param {module:api/PortfoliosApi~getPortfoliosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPortfolios(workspace, opts, callback) {
        opts = opts || {};
        let postBody = null;
        // verify the required parameter 'workspace' is set
        if (workspace === undefined || workspace === null) {
            throw new Error("Missing the required parameter 'workspace' when calling getPortfolios");
        }

        let pathParams = {
            
        };
        let queryParams = {
            'limit': opts['limit'],'offset': opts['offset'],'workspace': workspace,'owner': opts['owner'],'opt_fields': this.apiClient.buildCollectionParam(opts['opt_fields'], 'csv')
        };
        let headerParams = {
            
        };
        let formParams = {
            
        };

        let authNames = ['oauth2'];
        let contentTypes = [];
        let accepts = ['application/json; charset=UTF-8'];
        let returnType = PortfolioResponseArray;

        return this.apiClient.callApi(
            '/portfolios', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }
    /**
     * Callback function to receive the result of the removeCustomFieldSettingForPortfolio operation.
     * @callback moduleapi/PortfoliosApi~removeCustomFieldSettingForPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyResponseData{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a custom field from a portfolio
     * Removes a custom field setting from a portfolio.
     * @param {module:model/PortfolioGidRemoveCustomFieldSettingBody} body Information about the custom field setting being removed.
     * @param {String} portfolio_gid Globally unique identifier for the portfolio.
     * @param {module:api/PortfoliosApi~removeCustomFieldSettingForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    removeCustomFieldSettingForPortfolio(body, portfolio_gid, callback) {
        
        let postBody = body;
        // verify the required parameter 'body' is set
        if (body === undefined || body === null) {
            throw new Error("Missing the required parameter 'body' when calling removeCustomFieldSettingForPortfolio");
        }
        // verify the required parameter 'portfolio_gid' is set
        if (portfolio_gid === undefined || portfolio_gid === null) {
            throw new Error("Missing the required parameter 'portfolio_gid' when calling removeCustomFieldSettingForPortfolio");
        }

        let pathParams = {
            'portfolio_gid': portfolio_gid
        };
        let queryParams = {
            
        };
        let headerParams = {
            
        };
        let formParams = {
            
        };

        let authNames = ['oauth2'];
        let contentTypes = ['application/json; charset=UTF-8'];
        let accepts = ['application/json; charset=UTF-8'];
        let returnType = EmptyResponseData;

        return this.apiClient.callApi(
            '/portfolios/{portfolio_gid}/removeCustomFieldSetting', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }
    /**
     * Callback function to receive the result of the removeItemForPortfolio operation.
     * @callback moduleapi/PortfoliosApi~removeItemForPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyResponseData{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a portfolio item
     * Remove an item from a portfolio. Returns an empty data block.
     * @param {module:model/PortfolioGidRemoveItemBody} body Information about the item being removed.
     * @param {String} portfolio_gid Globally unique identifier for the portfolio.
     * @param {module:api/PortfoliosApi~removeItemForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    removeItemForPortfolio(body, portfolio_gid, callback) {
        
        let postBody = body;
        // verify the required parameter 'body' is set
        if (body === undefined || body === null) {
            throw new Error("Missing the required parameter 'body' when calling removeItemForPortfolio");
        }
        // verify the required parameter 'portfolio_gid' is set
        if (portfolio_gid === undefined || portfolio_gid === null) {
            throw new Error("Missing the required parameter 'portfolio_gid' when calling removeItemForPortfolio");
        }

        let pathParams = {
            'portfolio_gid': portfolio_gid
        };
        let queryParams = {
            
        };
        let headerParams = {
            
        };
        let formParams = {
            
        };

        let authNames = ['oauth2'];
        let contentTypes = ['application/json; charset=UTF-8'];
        let accepts = ['application/json; charset=UTF-8'];
        let returnType = EmptyResponseData;

        return this.apiClient.callApi(
            '/portfolios/{portfolio_gid}/removeItem', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }
    /**
     * Callback function to receive the result of the removeMembersForPortfolio operation.
     * @callback moduleapi/PortfoliosApi~removeMembersForPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioResponseData{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove users from a portfolio
     * Removes the specified list of users from members of the portfolio. Returns the updated portfolio record.
     * @param {module:model/PortfolioGidRemoveMembersBody} body Information about the members being removed.
     * @param {String} portfolio_gid Globally unique identifier for the portfolio.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @param {module:api/PortfoliosApi~removeMembersForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    removeMembersForPortfolio(body, portfolio_gid, opts, callback) {
        opts = opts || {};
        let postBody = body;
        // verify the required parameter 'body' is set
        if (body === undefined || body === null) {
            throw new Error("Missing the required parameter 'body' when calling removeMembersForPortfolio");
        }
        // verify the required parameter 'portfolio_gid' is set
        if (portfolio_gid === undefined || portfolio_gid === null) {
            throw new Error("Missing the required parameter 'portfolio_gid' when calling removeMembersForPortfolio");
        }

        let pathParams = {
            'portfolio_gid': portfolio_gid
        };
        let queryParams = {
            'opt_fields': this.apiClient.buildCollectionParam(opts['opt_fields'], 'csv')
        };
        let headerParams = {
            
        };
        let formParams = {
            
        };

        let authNames = ['oauth2'];
        let contentTypes = ['application/json; charset=UTF-8'];
        let accepts = ['application/json; charset=UTF-8'];
        let returnType = PortfolioResponseData;

        return this.apiClient.callApi(
            '/portfolios/{portfolio_gid}/removeMembers', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }
    /**
     * Callback function to receive the result of the updatePortfolio operation.
     * @callback moduleapi/PortfoliosApi~updatePortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioResponseData{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a portfolio
     * An existing portfolio can be updated by making a PUT request on the URL for that portfolio. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated portfolio record.
     * @param {module:model/PortfoliosPortfolioGidBody} body The updated fields for the portfolio.
     * @param {String} portfolio_gid Globally unique identifier for the portfolio.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @param {module:api/PortfoliosApi~updatePortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updatePortfolio(body, portfolio_gid, opts, callback) {
        opts = opts || {};
        let postBody = body;
        // verify the required parameter 'body' is set
        if (body === undefined || body === null) {
            throw new Error("Missing the required parameter 'body' when calling updatePortfolio");
        }
        // verify the required parameter 'portfolio_gid' is set
        if (portfolio_gid === undefined || portfolio_gid === null) {
            throw new Error("Missing the required parameter 'portfolio_gid' when calling updatePortfolio");
        }

        let pathParams = {
            'portfolio_gid': portfolio_gid
        };
        let queryParams = {
            'opt_fields': this.apiClient.buildCollectionParam(opts['opt_fields'], 'csv')
        };
        let headerParams = {
            
        };
        let formParams = {
            
        };

        let authNames = ['oauth2'];
        let contentTypes = ['application/json; charset=UTF-8'];
        let accepts = ['application/json; charset=UTF-8'];
        let returnType = PortfolioResponseData;

        return this.apiClient.callApi(
            '/portfolios/{portfolio_gid}', 'PUT',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

}
